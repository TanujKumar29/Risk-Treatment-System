package com.rts.gui_final;

import com.rts.dao.daofactory.MySQLDAOFactory;
import com.rts.dao.interfaces.AssetsThreatsVulnDao;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;



import com.rts.pojoclasses.*;

import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;

import javax.swing.table.TableColumnModel;

/*
 * ThreatVulnaribility.java
 *
 * Created on Aug 23, 2012, 5:54:13 PM
 */
/**
 *
 * @author rasanvin
 */
public class ThreatVulnaribility extends javax.swing.JFrame {

    Projects projects;

    public ThreatVulnaribility() {
        initComponents();
        loadTable(jTableThreatVulRegister);
        System.out.println("--->" + getThreatTypeList());
    }

    public ThreatVulnaribility(Projects projects) {
        this.projects = projects;
        initComponents();

        loadTable(jTableThreatVulRegister);
        System.out.println("--->" + getThreatTypeList());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAddThreatVul = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        addRowButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableThreatVulRegister = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setPreferredSize(new java.awt.Dimension(929, 531));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(204, 255, 255)));

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTableAddThreatVul.setBackground(new java.awt.Color(255, 204, 204));
        jTableAddThreatVul.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Asset Name", "Asset Value", "ThreatType", "Threat", "Vulnerability"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAddThreatVul.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(
            jComboBoxAddThreatList));
    jTableAddThreatVul.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(
        new JComboBox(new DefaultComboBoxModel(getVulnList()))));
jTableAddThreatVul.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(
    jComboBoxAddThreatType));
    jTableAddThreatVul.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(
        new JComboBox(new DefaultComboBoxModel(getAssetNameList()))));

jComboBoxAddThreatList.addFocusListener(new java.awt.event.FocusAdapter() {
    public void focusGained(java.awt.event.FocusEvent evt) {
        jComboBoxAddThreatListFocusGained(evt);
    }
    });

    jComboBoxAddThreatType.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            jComboBoxAddThreatTypeItemStateChanged(evt);
        }
    });
    jTableAddThreatVul.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jTableAddThreatVulMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(jTableAddThreatVul);

    jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18));
    jLabel3.setText("Enter Threats & Vulnerability");

    jButton3.setText("Reset");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });

    addRowButton.setText("Add Row");
    addRowButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addRowButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap(45, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addComponent(jLabel3)
                    .addGap(290, 290, 290))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 831, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(544, 544, 544)
                            .addComponent(addRowButton)))
                    .addContainerGap())))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel3)
            .addGap(18, 18, 18)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton1)
                .addComponent(jButton3)
                .addComponent(addRowButton))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
            .addContainerGap())
    );

    jPanel2.setBackground(new java.awt.Color(255, 255, 255));
    jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(255, 204, 204)));

    jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18));
    jLabel2.setText("Threats & Vulnerability");

    jTableThreatVulRegister.setBackground(new java.awt.Color(204, 255, 255));
    jTableThreatVulRegister.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {new Boolean(false), null, null, null, null, null, null, null, null, null, null}
        },
        new String [] {
            "Select", "Index", "Asset Name", "Asset Value", "ThreatType", "Threat", "Vulnerability", "AssetId", "ThreatId", "VulnerabilityId", "AssetThreatVulId"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
        };
        boolean[] canEdit = new boolean [] {
            true, false, false, false, true, true, true, false, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    //jTableThreatVulRegister.getColumnModel().getColumn(5).setCellEditor(new DefaultCellEditor(
        //    new JComboBox(new DefaultComboBoxModel(getThreatsList()))));

jTableThreatVulRegister.getColumnModel().getColumn(6).setCellEditor(new DefaultCellEditor(
    new JComboBox(new DefaultComboBoxModel(getVulnList()))));
    jTableThreatVulRegister.getColumnModel().getColumn(5).setCellEditor(new DefaultCellEditor(
        jComboBoxThreatList));
//jTableThreatVulRegister.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(
    //    new JComboBox(new DefaultComboBoxModel(getThreatTypeList()))));

    jComboBoxThreatList.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jComboBoxThreatListActionPerformed(evt);
        }
    });

    jComboBoxThreatList.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            jComboBoxThreatListFocusGained(evt);
        }
    });
    jComboBoxThreatList.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            jComboBoxThreatListItemStateChanged(evt);
        }
    });

    jTableThreatVulRegister.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(
        jComboBoxThreatType));
//    new JComboBox(new DefaultComboBoxModel(getThreatTypeList()))));

////
jComboBoxThreatType.addItemListener(new java.awt.event.ItemListener() {
    public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jComboBoxThreatTypeItemStateChanged(evt);
    }
    });

    //jComboBoxThreatType.addMouseListener(new java.awt.event.MouseAdapter() {
        //    public void mouseClicked(java.awt.event.MouseEvent evt) {
            //          jComboBoxThreatClick(evt);
            //    }
        //});
//jComboBoxThreatType.addActionListener(new java.awt.event.ActionListener() {
    //     public void actionPerformed(java.awt.event.ActionEvent evt) {
        //         jComboBoxThreatTypeActionPerformed(evt);
        //     }
    //});
    jTableThreatVulRegister.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jTableThreatVulRegisterMouseClicked(evt);
        }
    });
    jScrollPane2.setViewportView(jTableThreatVulRegister);
    jTableThreatVulRegister.getColumnModel().getColumn(0).setPreferredWidth(20);
    jTableThreatVulRegister.getColumnModel().getColumn(7).setMinWidth(0);
    jTableThreatVulRegister.getColumnModel().getColumn(7).setPreferredWidth(0);
    jTableThreatVulRegister.getColumnModel().getColumn(7).setMaxWidth(0);
    jTableThreatVulRegister.getColumnModel().getColumn(8).setMinWidth(0);
    jTableThreatVulRegister.getColumnModel().getColumn(8).setPreferredWidth(0);
    jTableThreatVulRegister.getColumnModel().getColumn(8).setMaxWidth(0);
    jTableThreatVulRegister.getColumnModel().getColumn(9).setMinWidth(0);
    jTableThreatVulRegister.getColumnModel().getColumn(9).setPreferredWidth(0);
    jTableThreatVulRegister.getColumnModel().getColumn(9).setMaxWidth(0);
    jTableThreatVulRegister.getColumnModel().getColumn(10).setMinWidth(0);
    jTableThreatVulRegister.getColumnModel().getColumn(10).setPreferredWidth(0);
    jTableThreatVulRegister.getColumnModel().getColumn(10).setMaxWidth(0);

    jButton2.setText("Update");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    jButton6.setText("Delete");
    jButton6.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton6ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap(47, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jButton6)
                    .addGap(670, 670, 670))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 827, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addComponent(jLabel2)
                    .addGap(299, 299, 299)))
            .addGap(29, 29, 29))
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addContainerGap(24, Short.MAX_VALUE)
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton2)
                .addComponent(jButton6))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(19, 19, 19))
    );

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(18, 18, 18)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(22, 22, 22)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(18, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void addRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowButtonActionPerformed
        // TODO add your handling code here:


        int rowCount = jTableAddThreatVul.getModel().getRowCount();
        int columnCount = jTableAddThreatVul.getModel().getColumnCount();
        Object[][] rowData = {{null, null, null, null, null, null, null, null}};
        //DefaultTableModel model;
        //jTable2.setModel(model);
        DefaultTableModel model = (DefaultTableModel) jTableAddThreatVul.getModel();

        model.addRow(rowData[0]);
        // model.setValueAt((rowCount + 1), rowCount, 1);
}//GEN-LAST:event_addRowButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int res = -1;
        List<AssetsThreatsVuln> asv = new ArrayList<AssetsThreatsVuln>();
        for (int i = 0; i < jTableAddThreatVul.getRowCount(); i++) {
            res = -1;
            System.out.println("Assets:" + jTableAddThreatVul.getValueAt(0, 0));
            asv.add(readTableRow(jTableAddThreatVul, i));
            if (asv.get(i).getThreats().getThreatName() == null || asv.get(i).getVulnerabilities().getVulnarabilityName() == null) {
                JOptionPane.showConfirmDialog(this, "Error", "Please select Threat and vulnerability for Row: " + i, JOptionPane.DEFAULT_OPTION);
                return;
            }
            res = MySQLDAOFactory.getDAOFactory().getAssetsThreatsVulnDao().insetAssetsThreatsVuln(asv.get(i));
        }
        if (res != -1) {
            JOptionPane.showConfirmDialog(this, "Success", "Threats and Vulnerabilities Inserted into Database Successfully!!", JOptionPane.DEFAULT_OPTION);
            loadTable(jTableThreatVulRegister);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTableAddThreatVulMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAddThreatVulMouseClicked
        // TODO add your handling code here:
        System.out.append("Mouse clicked.... projectId - " + projects.getProjectId());
        if (jTableAddThreatVul.getSelectedColumn() == 1) {
            System.out.println("Column 0 is selected.");
            int row = jTableAddThreatVul.getSelectedRow();
            String aName = (String) jTableAddThreatVul.getValueAt(row, 0);
            //List<Assets> asset=MySQLDAOFactory.getDAOFactory().getAssetsDao().fetchAssetsListFromDb("from Assets where assetsName='"+aName+"'");
            System.out.println("TndV project ID while fetching asset - " + projects.getProjectId());

            ///following query is added by Pushkar for assets only for perticular projects
            List<Assets> asset = MySQLDAOFactory.getDAOFactory().getAssetsDao().fetchAssetsListFromDb("from Assets where assetsName='" + aName + "' and projectId.projectId=" + projects.getProjectId());
            System.out.println("AssetValue is " + asset.size());
            jTableAddThreatVul.setValueAt((Float) asset.get(0).getAssetsValue(), row, 1);
        }
    }//GEN-LAST:event_jTableAddThreatVulMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        AssetsThreatsVuln asv = new AssetsThreatsVuln();
        String rows = null;
        for (int i = 0; i < jTableThreatVulRegister.getRowCount(); i++) {
            if ((Boolean) jTableThreatVulRegister.getValueAt(i, 0) == true) {
                asv = readTableRow(jTableThreatVulRegister, i);
                System.out.println("Threat Type to be Updated:" + asv.getThreats().getThreatType());
                if (jTableThreatVulRegister.getValueAt(i, 4) == null || jTableThreatVulRegister.getValueAt(i, 5) == null
                        || jTableThreatVulRegister.getValueAt(i, 6) == null) {
                    JOptionPane.showConfirmDialog(this, "Please enter the Threat Type, Threat and Vulnarability value", "Error", JOptionPane.DEFAULT_OPTION);
                } else {

                    int res = MySQLDAOFactory.getDAOFactory().getAssetsThreatsVulnDao().insetAssetsThreatsVuln(asv);
                    if (res != -1) {
                        if (rows == null) {
                            rows = "" + (i + 1);
                        } else {
                            rows = rows + "," + (i + 1);
                        }
                    }
                }


            }
        }
        if (rows != null) {
            JOptionPane.showConfirmDialog(this, "Data Updated Successfully for Rows:" + rows, "Success", JOptionPane.DEFAULT_OPTION);
            loadTable(jTableThreatVulRegister);
            for (int i = 0; i < jTableThreatVulRegister.getRowCount(); i++) {
                jTableThreatVulRegister.setValueAt(false, i, 0);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
//                int rowNum[], colNum[];
        int startIndex = -1;
        AssetsThreatsVulnDao atvDAO = MySQLDAOFactory.getDAOFactory().getAssetsThreatsVulnDao();

        Boolean[] selectColumnVal = new Boolean[jTableThreatVulRegister.getModel().getRowCount()];

        for (int i = 0; i < jTableThreatVulRegister.getModel().getRowCount(); i++) {
            selectColumnVal[i] = (Boolean) jTableThreatVulRegister.getValueAt(i, 0);
        }

        for (int i = (selectColumnVal.length - 1); i >= 0; i--) {
            if (selectColumnVal[i] == true) {
                startIndex = i;

                System.out.println("Row To be Deleted: " + i);
                AssetsThreatsVuln atv = new AssetsThreatsVuln();
//                System.out.println("Readed Row from Table:" + atv);
                if (jTableThreatVulRegister.getValueAt(i, 10) == null) {
                    DefaultTableModel model = (DefaultTableModel) jTableThreatVulRegister.getModel();
                    model.removeRow(i);
                    continue;
                } else {
                    atv = readTableRow(jTableThreatVulRegister, i);
                    int row = atvDAO.deleteAssetsThreatsVuln(atv);
                    if (row == 0) {
                        System.out.println("Doesn't deleted any row!");
                    } else if (row != 0) {
                        System.out.println("Deleted Row: " + row);
                        DefaultTableModel model = (DefaultTableModel) jTableThreatVulRegister.getModel();
                        model.removeRow(i);
                    } else if (row == -1) {
                        System.out.println("Error in executing Query");
                    }
                    loadTable(jTableThreatVulRegister);
                }
            }
        }
//   System.out.println("start index "+startIndex+" total rows:"+jTable2.getModel().getRowCount());
        for (int i = startIndex; i <= jTableThreatVulRegister.getModel().getRowCount(); i++) {
            if (i > 0) {
                //         System.out.println("setting " + i + " at " + i);
                jTableThreatVulRegister.setValueAt(i, i - 1, 1);
            }
        }
        //index  = jTableThreatVulRegister.getRowCount()-1;
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTableThreatVulRegisterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableThreatVulRegisterMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableThreatVulRegisterMouseClicked

    private void jComboBoxThreatClick(java.awt.event.MouseEvent evt) {
        System.out.println("Mouse clicked Event called for Threat RegisterOO");
    }

//    private void jComboBoxThreatTypeActionPerformed(java.awt.event.ActionEvent evt) {
    private void jComboBoxThreatListActionPerformed(java.awt.event.ActionEvent evt) {
//
//         int row = jTableThreatVulRegister.getSelectedRow();
//         System.out.println("Selected Row of ThreatList: "+row);
//         System.out.println("Current value is:"+jTableThreatVulRegister.getValueAt(row, 5));
//         System.out.println("Fetching the Threat List for Threat Type"+jTableThreatVulRegister.getModel().getValueAt(row, 4)+" Row:"+row);
//         String[] threatsList=MySQLDAOFactory.getDAOFactory().getThreatsDao().fetchThreatsCol("Select threatName from Threats where threatType='"+jTableThreatVulRegister.getModel().getValueAt(row, 4)+"'");
//         jComboBoxThreatList.setModel(new DefaultComboBoxModel(threatsList));
    }

    private void jComboBoxThreatListItemStateChanged(java.awt.event.ItemEvent evt) {
        int row = jTableThreatVulRegister.getSelectedRow();
        String data = (String) jTableThreatVulRegister.getValueAt(row, 5);
        threatList.set(row, data);

    }

    private void jComboBoxThreatListFocusGained(java.awt.event.FocusEvent e) {
        // System.out.println("Focus Gained!!");
        int row = jTableThreatVulRegister.getSelectedRow();
        String[] threatsList = MySQLDAOFactory.getDAOFactory().getThreatsDao().fetchThreatsCol("Select threatName from Threats where threatType='" + jTableThreatVulRegister.getModel().getValueAt(row, 4) + "'");
        jComboBoxThreatList.setModel(new DefaultComboBoxModel(threatsList));

        if (jTableThreatVulRegister.getValueAt(row, 5) == "Select") {
            String b = threatList.get(row);
            // String a[]={b};
            // jComboBoxThreatList.setModel(new DefaultComboBoxModel(a));// = new JComboBox(new DefaultComboBoxModel(a));
            jComboBoxThreatList.setSelectedItem(b);
        }

    }

    private void jComboBoxThreatTypeItemStateChanged(java.awt.event.ItemEvent evt) {
        int row = jTableThreatVulRegister.getSelectedRow();
        //System.out.println("Selected row:"+row);
        if (row != -1) {
            jTableThreatVulRegister.setValueAt("Select", row, 5);
//         String a[]={"Refresh"};
//         for(int i=0;i<jTableThreatVulRegister.getRowCount();i++){
//            if(jTableThreatVulRegister.getValueAt(i, 10)!=null && i!=row){
//                jTableThreatVulRegister.setValueAt( "Refresh", i, 5 );
        }
//        }
//         }
//         System.out.println("Fetching the Threat List for Threat Type"+jComboBoxThreatType.getSelectedItem()+" Row:"+row);
//         String[] threatsList=MySQLDAOFactory.getDAOFactory().getThreatsDao().fetchThreatsCol("Select threatName from Threats where threatType='"+jComboBoxThreatType.getSelectedItem()+"'");
//         jComboBoxThreatList.setModel(new DefaultComboBoxModel(threatsList));

//        String a[]=new String[] {"Refresh"};
//        int row = jTableThreatVulRegister.getSelectedRow();

//        for(int i=0;i<jTableThreatVulRegister.getRowCount();i++){
//          if(i!=row){
//          jTableThreatVulRegister.setValueAt("Refresh", i, 5);
//          jComboBoxThreatList.setModel(new DefaultComboBoxModel(a));
//          }
//        }

    }

    private void jComboBoxAddThreatListFocusGained(java.awt.event.FocusEvent evt) {
        int row = jTableAddThreatVul.getSelectedRow();
        if (row != -1) {
            String[] threatsList = MySQLDAOFactory.getDAOFactory().getThreatsDao().fetchThreatsCol("Select threatName from Threats where threatType='" + jTableAddThreatVul.getModel().getValueAt(row, 2) + "'");
            jComboBoxAddThreatList.setModel(new DefaultComboBoxModel(threatsList));
        }
    }

    private void jComboBoxAddThreatTypeItemStateChanged(java.awt.event.ItemEvent evt) {
        int row = jTableAddThreatVul.getSelectedRow();
        if (row != -1) {
            jTableAddThreatVul.setValueAt("Select", row, 3);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ThreatVulnaribility().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRowButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableAddThreatVul;
    private javax.swing.JTable jTableThreatVulRegister;
    // End of variables declaration//GEN-END:variables
    private String a[] = {"<Select ThreatType>"};
    private javax.swing.JComboBox jComboBoxThreatList = new JComboBox(new DefaultComboBoxModel(a));
    private javax.swing.JComboBox jComboBoxThreatType = new JComboBox(new DefaultComboBoxModel(getThreatTypeList()));
    private List<String> threatList = new ArrayList<String>();
    private javax.swing.JComboBox jComboBoxAddThreatType = new JComboBox(new DefaultComboBoxModel(getThreatTypeList()));
    private javax.swing.JComboBox jComboBoxAddThreatList = new JComboBox(new DefaultComboBoxModel(a));
    MyItemListener it;
    CheckBoxHeader cbh;
    CheckBoxHeader rendererComponent;
    DefaultTableModel dtm;

//*****************************************************My methods****************
    private AssetsThreatsVuln readTableRow(JTable table, int row) {
        int i = 0;
        if (table == jTableAddThreatVul) {
            i = 2;
        }
        AssetsThreatsVuln asv = new AssetsThreatsVuln();

        //System.out.println("Searching for Row: "+row+"Column:"+(2-i)+"value: "+;

        asv.getAssets().setAssetsName((String) table.getValueAt(row, 2 - i));

        asv.getAssets().setAssetsValue((Float) table.getValueAt(row, 3 - i));


        asv.getThreats().setThreatType((String) table.getValueAt(row, 4 - i));
        asv.getThreats().setThreatName((String) table.getValueAt(row, 5 - i));
        asv.getVulnerabilities().setVulnarabilityName((String) table.getValueAt(row, 6 - i));

        if (asv.getThreats().getThreatName() != null) {
            List<Threats> tList = new ArrayList<Threats>();
            tList = MySQLDAOFactory.getDAOFactory().getThreatsDao().fetchThreats("from Threats where threatName='" + asv.getThreats().getThreatName() + "'");
            asv.getThreats().setThreatId(tList.get(0).getThreatId());
        }
        if (asv.getVulnerabilities().getVulnarabilityName() != null) {
            List<Vulnarabilities> vList = new ArrayList<Vulnarabilities>();
            vList = MySQLDAOFactory.getDAOFactory().getVulnDao().fetchVuln("from Vulnarabilities where vulnarabilityName='" + asv.getVulnerabilities().getVulnarabilityName() + "'");
            asv.getVulnerabilities().setVulnarabilityId(vList.get(0).getVulnarabilityId());
        }


        if (table == jTableAddThreatVul) {
            if (asv.getAssets().getAssetsName() != null) {
                List<Assets> aList = new ArrayList<Assets>();

                ///this query is added by Pushkar
                aList = MySQLDAOFactory.getDAOFactory().getAssetsDao().fetchAssetsListFromDb("from Assets where assetsName='" + asv.getAssets().getAssetsName() + "' and projectId.projectId=" + projects.getProjectId());
                asv.getAssets().setAssetId(aList.get(0).getAssetId());
            }
        } else {
            System.out.println("Update row ID" + table.getValueAt(row, 7));
            asv.getAssets().setAssetId((Integer) table.getValueAt(row, 7));
            // asv.getThreats().setThreatId((Integer)table.getValueAt(row, 8));
            // asv.getVulnerabilities().setVulnarabilityId((Integer)table.getValueAt(row, 9));
            asv.setAssetsThreatsVulnId((Integer) table.getValueAt(row, 10));
        }

        return asv;

    }

    private String[] getAssetNameList() {

        //String query="Select assetsName from Assets";//where projectId=project.getProjectId()
        System.out.println("project ID in show assets list: " + projects.getProjectId());
        String query = "Select assetsName from Assets where projectId.projectId=" + projects.getProjectId();
        String[] assetNamesList = MySQLDAOFactory.getDAOFactory().getAssetsDao().fetchAssetsCol(query);

        if (assetNamesList != null) {
            return assetNamesList;
        }
        assetNamesList[0] = "null";
        return assetNamesList;
    }

    private String[] getVulnList() {

        List<Vulnarabilities> vulList = new ArrayList<Vulnarabilities>();
        vulList = MySQLDAOFactory.getDAOFactory().getVulnDao().fetchVuln("from Vulnarabilities");
        String[] vulnStrList = new String[vulList.size()];
        for (int i = 0; i < vulList.size(); i++) {
            vulnStrList[i] = vulList.get(i).getVulnarabilityName();
        }
        return vulnStrList;
    }

    private String[] getThreatTypeList() {

        String[] threatsTypeStrList = MySQLDAOFactory.getDAOFactory().getThreatsDao().fetchThreatsCol("Select distinct threatType from Threats");

        if (threatsTypeStrList != null) {
            for (String i : threatsTypeStrList) {
                //   System.out.println("Feched list:"+i);
            }
        }
        return threatsTypeStrList;
    }

    private String[] getThreatsList() {

        List<Threats> threatList = new ArrayList<Threats>();
        threatList = MySQLDAOFactory.getDAOFactory().getThreatsDao().fetchThreats("from Threats");
        String[] threatsStrList = new String[threatList.size()];
        for (int i = 0; i < threatList.size(); i++) {
            threatsStrList[i] = threatList.get(i).getThreatName();
        }
        return threatsStrList;

    }

    private void loadTable(JTable table) {

        List<AssetsThreatsVuln> assetThreatsVulnList = new ArrayList<AssetsThreatsVuln>();
        List<Assets> assets = new ArrayList<Assets>();
        int index = 0;
        int foundInASV = 0;
        // assets = MySQLDAOFactory.getDAOFactory().getAssetsDao().fetchAssetsListFromDb("from Assets");
        System.out.println("Project Id in threats and vulnarabilities is : " + projects.getProjectId());
        assets = MySQLDAOFactory.getDAOFactory().getAssetsDao().fetchAssetsListFromDb("from Assets where projectId.projectId=" + projects.getProjectId());
        // String query="from AssetsThreatsVuln a where a.getAssets().getAssetId()="+assets.get(1).getAssetId();

        assetThreatsVulnList = MySQLDAOFactory.getDAOFactory().getAssetsThreatsVulnDao().fetchAssetsThreatsVuln("from AssetsThreatsVuln where assets.projectId.projectId=" + projects.getProjectId());

//        System.out.println("Dao loaded");
        //List <Threats> allThreats = dAOObj.fetchThreatsListFromDb("from ContractReq where assetId = "+asset_id);
        if (assets.size() != 0) {
            for (int i = 0; i < assets.size(); i++) {
                if (table.getModel().getRowCount() < assets.size()) {
                    @SuppressWarnings("BooleanConstructorCall")
                    Object[][] rowData = {{new Boolean(false), null, null, null, null, null}};

                    DefaultTableModel model = (DefaultTableModel) table.getModel();
                    model.addRow(rowData[0]);
                    if ((table.getModel().getRowCount() - 1) == assets.size()) {
                        //model.setValueAt(table.getModel().getRowCount(), table.getModel().getRowCount() - 1, 1);
                        index++;
                        model.setValueAt(index, index - 1, 1);
                    }
                }

                //        } // for

                for (int j = 0; j < assetThreatsVulnList.size(); j++) {

                    if (table.getModel().getRowCount() < assetThreatsVulnList.size()) {
                        @SuppressWarnings("BooleanConstructorCall")
                        Object[][] rowData = {{new Boolean(false), null, null, null, null, null}};

                        DefaultTableModel model = (DefaultTableModel) table.getModel();
                        model.addRow(rowData[0]);
                        if ((table.getModel().getRowCount() - 1) == assetThreatsVulnList.size()) {
                            index++;
                            model.setValueAt(index, index - 1, 1);

                        }
                    }
                    if (assets.get(i).getAssetId() == assetThreatsVulnList.get(j).getAssets().getAssetId()) {
                        index = index + 1;
                        foundInASV = 1;
                        table.getModel().setValueAt(index, index - 1, 1);
                        table.getModel().setValueAt(assetThreatsVulnList.get(j).getAssets().getAssetsName(), index - 1, 2);
                        table.getModel().setValueAt(assetThreatsVulnList.get(j).getAssets().getAssetsValue(), index - 1, 3);
                        //Load other fields threts and Vulnerabilityr
                        table.setValueAt(assetThreatsVulnList.get(j).getThreats().getThreatType(), index - 1, 4);
                        table.setValueAt(assetThreatsVulnList.get(j).getThreats().getThreatName(), index - 1, 5);
                        threatList.add(assetThreatsVulnList.get(j).getThreats().getThreatName());
                        table.setValueAt(assetThreatsVulnList.get(j).getVulnerabilities().getVulnarabilityName(), index - 1, 6);

                        //Set Invisible columns
                        table.setValueAt(assetThreatsVulnList.get(j).getAssets().getAssetId(), index - 1, 7);
                        table.setValueAt(assetThreatsVulnList.get(j).getThreats().getThreatId(), index - 1, 8);
                        table.setValueAt(assetThreatsVulnList.get(j).getVulnerabilities().getVulnarabilityId(), index - 1, 9);
                        table.setValueAt(assetThreatsVulnList.get(j).getAssetsThreatsVulnId(), index - 1, 10);

                        //            System.out.println("Inveisible columns AssetID:"+assetThreatsVulnList.get(j).getAssets().getAssetId()
                        //                    +" ThreatID:"+assetThreatsVulnList.get(j).getThreats().getThreatId()
                        //                    +"Vulnerability ID:"+assetThreatsVulnList.get(j).getVulnerabilities().getVulnarabilityId());
                    }
                }
                if (foundInASV == 1) {
                    //invisible column
                    foundInASV = 0;
                    table.setValueAt(assets.get(i).getAssetId(), index - 1, 7);
                    table.setValueAt(assets.get(i).getAssetsName(), index - 1, 2);
                    table.setValueAt(assets.get(i).getAssetsValue(), index - 1, 3);
                }

            }
        }
        if (assets.size() > 0) {
            System.out.println("Database contents delivered...");
        } else {
            System.out.println("Table was empty...");
        }
    }

//------------------ for Select All column---------------------------
    class MyItemListener implements ItemListener {

        public void itemStateChanged(ItemEvent e) {
            Object source = e.getSource();
            if (source instanceof AbstractButton == false) {
                return;
            }
            boolean checked = e.getStateChange() == ItemEvent.SELECTED;
            for (int x = 0, y = jTableThreatVulRegister.getRowCount(); x < y; x++) {
                jTableThreatVulRegister.setValueAt(new Boolean(checked), x, 0);
            }
        }
    }

    class CheckBoxHeader extends JCheckBox implements TableCellRenderer, MouseListener {

        protected int column;
        protected boolean mousePressed = false;
        ItemListener it1;

        public CheckBoxHeader(ItemListener itemListener) {
            setRendererComponent(this);
            this.it1 = itemListener;
            rendererComponent.addItemListener(it1);

            setHorizontalAlignment(SwingConstants.CENTER);
            setOpaque(true);

            // This call is needed because DefaultTableCellRenderer calls setBorder()
            // in its constructor, which is executed after updateUI()
            setBorder(UIManager.getBorder("TableHeader.cellBorder"));



        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (table != null) {
                JTableHeader header = table.getTableHeader();
                if (header != null) {
                    rendererComponent.setForeground(header.getForeground());
                    rendererComponent.setBackground(header.getBackground());
                    rendererComponent.setFont(header.getFont());
                    header.addMouseListener(rendererComponent);
                }
            }
            setColumn(column);
            setBorder(UIManager.getBorder("TableHeader.cellBorder"));
            return rendererComponent;
        }

        protected void setColumn(int column) {
            this.column = column;
        }

        public int getColumn() {
            return column;
        }

        protected void handleClickEvent(MouseEvent e) {
            if (mousePressed) {
                mousePressed = false;

                JTableHeader header = (JTableHeader) (e.getSource());
                JTable tableView = header.getTable();


                TableColumnModel columnModel = tableView.getColumnModel();
                int viewColumn = columnModel.getColumnIndexAtX(e.getX());
                int column = tableView.convertColumnIndexToModel(viewColumn);
                if (viewColumn == this.column && e.getClickCount() == 1 && column != -1) {
                    doClick();
                }
            }
        }

        public void mouseClicked(MouseEvent e) {
            handleClickEvent(e);
            ((JTableHeader) e.getSource()).repaint();
        }

        public void mousePressed(MouseEvent e) {
            mousePressed = true;
        }

        public void mouseReleased(MouseEvent e) {
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }
    }

    public CheckBoxHeader getRendererComponent() {
        return rendererComponent;
    }

    public void setRendererComponent(CheckBoxHeader rendererComponent) {
        //rendererComponent.setText("Check All");

        this.rendererComponent = rendererComponent;
    }

    class MyMouseListener extends MouseAdapter {

        public void mouseClicked(MouseEvent mouseEvent) {
            int checkedCount = 0;
            rendererComponent.removeItemListener(it);
            if (rendererComponent instanceof JCheckBox) {
                boolean[] flags = new boolean[jTableThreatVulRegister.getRowCount()];
                for (int i = 0; i < jTableThreatVulRegister.getRowCount(); i++) {
                    flags[i] = ((Boolean) jTableThreatVulRegister.getValueAt(i, 0)).booleanValue();
//                    //flags[i]=(Boolean)jTableThreatVulRegister.getModel().getValueAt(i, 0);
//                    System.out.println("Checkbox Values are"+jTableThreatVulRegister.getModel().getValueAt(i, 0));
                    if (flags[i]) {
                        checkedCount++;
                    }
                }
                if (checkedCount == jTableThreatVulRegister.getRowCount()) {
                    ((JCheckBox) rendererComponent).setSelected(true);
                }
                if (checkedCount != jTableThreatVulRegister.getRowCount()) {
                    ((JCheckBox) rendererComponent).setSelected(false);
                }
            }
            rendererComponent.addItemListener(it);
            jTableThreatVulRegister.getTableHeader().repaint();
        }
    }
//------------------- code fo Select All Column Ends here -------------
//*************************************Methods ends******************************
}
