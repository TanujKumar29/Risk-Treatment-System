/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Risk_EvaluationFrame.java
 *
 * Created on Aug 23, 2012, 6:03:46 PM
 */

/**
 *
 * @author bhandrah
 */

package com.rts.gui_final;

import com.rts.dao.daofactory.MySQLDAOFactory;
import com.rts.dao.interfaces.RiskEvaluationDao;
import com.rts.util.Config;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;


import com.rts.pojoclasses.*;

import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

public class Risk_EvaluationFrame extends javax.swing.JFrame {


    /** Creates new form Risk_EvaluationFrame */
    public Risk_EvaluationFrame() 
    {
        System.out.println("Default constructor called");
        initComponents();
        loadTable(jTableRisksRegister);
    }

      public Risk_EvaluationFrame(Projects projects)
      {
          System.out.println("Parametarized constructor called");
            this.projects= projects;
            System.out.println("Project loaded in constructor:: "+this.projects.getProjectId());
        initComponents();
        loadTable(jTableRisksRegister);
      }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButtonAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAddRisks = new javax.swing.JTable();
        jButtonReset = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableRisksRegister = new javax.swing.JTable();
        jButtonUpdate = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setMaximumSize(new java.awt.Dimension(327679, 327679));
        jPanel3.setPreferredSize(new java.awt.Dimension(929, 533));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(204, 255, 255)));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel2.setText("Enter Risk Evaluation");

        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jTableAddRisks.setAutoCreateRowSorter(true);
        jTableAddRisks.setBackground(new java.awt.Color(255, 204, 204));
        jTableAddRisks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Asset Name", "Asset Value", "Threats", "Vulnaribility", "Risk Likelihood", "Risk Impact", "Risk Exposure", "Category", "AssetId", "AssetThreatVulnId", "ThreatId", "VulnarabilityId"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, true, true, false, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jComboBoxAssetList= new JComboBox(new DefaultComboBoxModel(getAssetNameList()));
        jTableAddRisks.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(jComboBoxAssetList));
        jTableAddRisks.getColumnModel().getColumn(7).setCellEditor(new DefaultCellEditor(
            new JComboBox(new DefaultComboBoxModel(Config.riskCat))));
    jTableAddRisks.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jTableAddRisksMouseClicked(evt);
        }
    });
    Config cg=new Config();
    jTableAddRisks.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(
        new JComboBox(new DefaultComboBoxModel(new String[] {
            cg.arr1[0],
            cg.arr1[1],
            cg.arr1[2],
            cg.arr1[3]

        }))));
        jScrollPane1.setViewportView(jTableAddRisks);
        jTableAddRisks.getColumnModel().getColumn(8).setMinWidth(0);
        jTableAddRisks.getColumnModel().getColumn(8).setPreferredWidth(0);
        jTableAddRisks.getColumnModel().getColumn(8).setMaxWidth(0);
        jTableAddRisks.getColumnModel().getColumn(9).setMinWidth(0);
        jTableAddRisks.getColumnModel().getColumn(9).setPreferredWidth(0);
        jTableAddRisks.getColumnModel().getColumn(9).setMaxWidth(0);
        jTableAddRisks.getColumnModel().getColumn(10).setMinWidth(0);
        jTableAddRisks.getColumnModel().getColumn(10).setPreferredWidth(0);
        jTableAddRisks.getColumnModel().getColumn(10).setMaxWidth(0);
        jTableAddRisks.getColumnModel().getColumn(11).setMinWidth(0);
        jTableAddRisks.getColumnModel().getColumn(11).setPreferredWidth(0);
        jTableAddRisks.getColumnModel().getColumn(11).setMaxWidth(0);

        jButtonReset.setText("Reset");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(354, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(348, 348, 348))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(736, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 866, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonReset)
                    .addComponent(jButtonAdd))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(255, 204, 204)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel3.setText("Risk Evaluation");

        jTableRisksRegister.setAutoCreateRowSorter(true);
        jTableRisksRegister.setBackground(new java.awt.Color(204, 255, 255));
        jTableRisksRegister.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "Index", "Asset Name", "Asset Value", "Threats", "Vulnaribility", "Risk Likelihood", "Risk Impact", "Risk Exposure", "Category", "RiskId", "AssetId", "AssetThreatVulnId", "ThreatId", "VulnarabilityId"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true, true, true, true, true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableColumn tc = jTableRisksRegister.getColumnModel().getColumn(0);
        tc.setCellEditor(jTableRisksRegister.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(jTableRisksRegister.getDefaultRenderer(Boolean.class));
        jTableRisksRegister.addMouseListener(new MyMouseListener());
        it = new MyItemListener();
        cbh = new CheckBoxHeader(it);
        tc.setHeaderRenderer(cbh);
        jTableRisksRegister.getColumnModel().getColumn(9).setCellEditor(new DefaultCellEditor(
            new JComboBox(new DefaultComboBoxModel(Config.riskCat))));
    jScrollPane2.setViewportView(jTableRisksRegister);
    jTableRisksRegister.getColumnModel().getColumn(0).setMinWidth(20);
    jTableRisksRegister.getColumnModel().getColumn(0).setPreferredWidth(20);
    jTableRisksRegister.getColumnModel().getColumn(0).setMaxWidth(20);
    jTableRisksRegister.getColumnModel().getColumn(1).setMinWidth(40);
    jTableRisksRegister.getColumnModel().getColumn(1).setPreferredWidth(20);
    jTableRisksRegister.getColumnModel().getColumn(1).setMaxWidth(40);
    jTableRisksRegister.getColumnModel().getColumn(10).setMinWidth(0);
    jTableRisksRegister.getColumnModel().getColumn(10).setPreferredWidth(0);
    jTableRisksRegister.getColumnModel().getColumn(10).setMaxWidth(0);
    jTableRisksRegister.getColumnModel().getColumn(11).setMinWidth(0);
    jTableRisksRegister.getColumnModel().getColumn(11).setPreferredWidth(0);
    jTableRisksRegister.getColumnModel().getColumn(11).setMaxWidth(0);
    jTableRisksRegister.getColumnModel().getColumn(12).setMinWidth(0);
    jTableRisksRegister.getColumnModel().getColumn(12).setPreferredWidth(0);
    jTableRisksRegister.getColumnModel().getColumn(12).setMaxWidth(0);
    jTableRisksRegister.getColumnModel().getColumn(13).setMinWidth(0);
    jTableRisksRegister.getColumnModel().getColumn(13).setPreferredWidth(0);
    jTableRisksRegister.getColumnModel().getColumn(13).setMaxWidth(0);
    jTableRisksRegister.getColumnModel().getColumn(14).setMinWidth(0);
    jTableRisksRegister.getColumnModel().getColumn(14).setPreferredWidth(0);
    jTableRisksRegister.getColumnModel().getColumn(14).setMaxWidth(0);

    jButtonUpdate.setText("Update");
    jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonUpdateActionPerformed(evt);
        }
    });

    jButtonDelete.setText("Delete");
    jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonDeleteActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(371, 371, 371)
                    .addComponent(jLabel3))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(29, 29, 29)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jButtonUpdate)
                            .addGap(18, 18, 18)
                            .addComponent(jButtonDelete)))))
            .addContainerGap(18, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButtonDelete)
                .addComponent(jButtonUpdate))
            .addGap(18, 18, 18)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(22, 22, 22))
    );

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap(43, Short.MAX_VALUE))))
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(25, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 953, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(36, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(20, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        for(int i=0;i<jTableAddRisks.getRowCount();i++){
            for(int j=0;j<jTableAddRisks.getColumnCount();j++){
                jTableAddRisks.setValueAt(null, i, j);
            }

        }
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        int res=-1; // To know the Database Operation Status
        List<RiskEvaluation> riskEvaluation = new ArrayList<RiskEvaluation>();
        for(int i=0;i<jTableAddRisks.getRowCount();i++){
            if(jTableAddRisks.getValueAt(i, 1)!=null && jTableAddRisks.getValueAt(i, 6)!=null) {
            res=-1;
            //System.out.println("Risks:"+jTableAddRisks.getValueAt(0, 0));
            riskEvaluation.add(readTableRow(jTableAddRisks, i));
            System.out.println("Abt to read Row:"+i);
            if(riskEvaluation.get(i).getAssetsThreatsVuln().getThreats().getThreatName()==null ||
                    riskEvaluation.get(i).getAssetsThreatsVuln().getVulnerabilities().getVulnarabilityName()==null) {
                JOptionPane.showConfirmDialog(this,"Error", "Please select Threat and vulnerability for Row: "+i,JOptionPane.DEFAULT_OPTION);
                return;
            }
            if(riskEvaluation.get(i).getRiskLikelihood()==0 ||
                    riskEvaluation.get(i).getRiskImpact()==0 ) {
                JOptionPane.showConfirmDialog(this, "Please Enter the Imapct and Likelihood for Row: "+i,"Error",JOptionPane.DEFAULT_OPTION);
                return;
            }

         res=MySQLDAOFactory.getDAOFactory().getRiskEvaluationDao().insertRiskEvaluation(riskEvaluation.get(i));
         System.out.println("Insersion Result:"+res);
        }
        }
        System.out.println("Waiting here");
        if(res!=-1){

           JOptionPane.showConfirmDialog(this, "Data Inserted into Database Successfully!!","Success",JOptionPane.DEFAULT_OPTION);
           loadTable(jTableRisksRegister);
        }
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // TODO add your handling code here:
        RiskEvaluation riskEvaluation = new RiskEvaluation();
        //AssetsThreatsVuln asv = new AssetsThreatsVuln();
        String rows=null;
        for(int i=0;i<jTableRisksRegister.getRowCount();i++){
            if((Boolean)jTableRisksRegister.getValueAt(i, 0)==true){
                riskEvaluation=readTableRow(jTableRisksRegister, i);
                //System.out.println("Threat Type to be Updated:"+riskEvaluation.getThreats().getThreatType());
                if(jTableRisksRegister.getValueAt(i, 3)==null||jTableRisksRegister.getValueAt(i, 8)==null
                      ||  jTableRisksRegister.getValueAt(i, 9)==null){
                    JOptionPane.showConfirmDialog(this, "Please Fill All the Columns","Error",JOptionPane.DEFAULT_OPTION);
                } else {

                    int res = MySQLDAOFactory.getDAOFactory().getRiskEvaluationDao().insertRiskEvaluation(riskEvaluation);
                    if(res!=-1){
                        if(rows==null){ rows = ""+(i+1);}
                        else
                           rows=rows+","+(i+1);
                    }
                }
            }
        }
        if(rows!=null) {
        JOptionPane.showConfirmDialog(this, "Data Updated Successfully for Rows:"+rows,"Success",JOptionPane.DEFAULT_OPTION);
        loadTable(jTableRisksRegister);
        for(int i=0;i<jTableRisksRegister.getRowCount();i++){ jTableRisksRegister.setValueAt(false, i, 0);}
        }
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        int startIndex = -1;
        RiskEvaluationDao riskEvaluationDAO = MySQLDAOFactory.getDAOFactory().getRiskEvaluationDao();
        RiskEvaluation riskEvaluation = new RiskEvaluation();
        Boolean[] selectColumnVal = new Boolean[jTableRisksRegister.getModel().getRowCount()];

        for (int i = 0; i < jTableRisksRegister.getModel().getRowCount(); i++) {
            selectColumnVal[i] = (Boolean) jTableRisksRegister.getValueAt(i, 0);
        }

        for (int i = (selectColumnVal.length - 1); i >= 0; i--) {
            if (selectColumnVal[i] == true) {
                startIndex = i;

                System.out.println("Row To be Deleted: " + i);
                if (jTableRisksRegister.getValueAt(i, 10)==null) {
                    DefaultTableModel model = (DefaultTableModel) jTableRisksRegister.getModel();
                    model.removeRow(i);
                    continue;
                } else {
                    riskEvaluation = readTableRow(jTableRisksRegister,i);
                    int row = riskEvaluationDAO.deleteRiskEvaluation(riskEvaluation);
                    if (row == 0) {
                        System.out.println("Doesn't deleted any row!");
                    } else if (row != 0) {
                        System.out.println("Deleted Row: " + row);
                        DefaultTableModel model = (DefaultTableModel) jTableRisksRegister.getModel();
                        model.removeRow(i);
                    } else if (row == -1) {
                        System.out.println("Error in executing Query");
                    }
                    loadTable(jTableRisksRegister);
                }
            }
        }
//   System.out.println("start index "+startIndex+" total rows:"+jTable2.getModel().getRowCount());
        for (int i = startIndex; i <= jTableRisksRegister.getModel().getRowCount(); i++) {
            if(i>0){
   //         System.out.println("setting " + i + " at " + i);
            jTableRisksRegister.setValueAt(i, i - 1, 1);
            }
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jTableAddRisksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAddRisksMouseClicked
        // TODO add your handling code here:
        String assetName=null;
        int assetId=0;
        float assetValue=0;

        List<AssetsThreatsVuln> atvList = new ArrayList<AssetsThreatsVuln>();
        int row = jTableAddRisks.getSelectedRow();
        if(jTableAddRisks.getSelectedRowCount()==1)
        {
            if(jTableAddRisks.getSelectedColumn()==1)
            {
                assetName=(String)jTableAddRisks.getValueAt(jTableAddRisks.getSelectedRow(), 0);
                //Fetch corresponding AssetValue and AssetId based on AssetName and ProjectId.
                if(assetName!=null) {
                    List<Assets> aList=new ArrayList<Assets>();
                    //Also Add where ProjectId == projectId clause in the below Query.
                    aList=MySQLDAOFactory.getDAOFactory().getAssetsDao().fetchAssetsListFromDb("from Assets where assetsName='"+assetName+"'");
                    assetId=(int)aList.get(0).getAssetId();
                    assetValue=aList.get(0).getAssetsValue();

                    jTableAddRisks.setValueAt(assetValue, jTableAddRisks.getSelectedRow(), 1);

                    //get Threats and Vulnarabilities.
                    String query="from AssetsThreatsVuln atv where atv.assets.assetId="+assetId;
                    atvList = MySQLDAOFactory.getDAOFactory().getAssetsThreatsVulnDao().fetchAssetsThreatsVuln(query);
                    //Load all the Threats and vuln into AddTable.
                   // System.out.println("Number of assets Records"+atvList.size());
                    for(int i=0;i<atvList.size();i++)
                    {
                        //Add Rows if required in the table.
                        if ( (jTableAddRisks.getModel().getRowCount()-jTableAddRisks.getSelectedRow()) < atvList.size() ) {
                            @SuppressWarnings("BooleanConstructorCall")
                            Object[][] rowData = {{null, null, null, null,null,null,null, null, null, null,null,null}};
                            DefaultTableModel model = (DefaultTableModel) jTableAddRisks.getModel();
                            model.addRow(rowData[0]);
                            if ((jTableAddRisks.getModel().getRowCount() - 1) == atvList.size()) {
                                //model.setValueAt(table.getModel().getRowCount(), table.getModel().getRowCount() - 1, 1);
                                //index++;
                                model.setValueAt(row+1,row+i,1);
                            }
                        }
                        jTableAddRisks.setValueAt(assetName, row+i, 0);
                        jTableAddRisks.setValueAt(assetValue, row+i, 1);
                        jTableAddRisks.setValueAt(atvList.get(i).getThreats().getThreatName(), row+i, 2);
                        jTableAddRisks.setValueAt(atvList.get(i).getVulnerabilities().getVulnarabilityName(), row+i, 3);
                        //set Invisible columns
                        jTableAddRisks.setValueAt(assetId, row+i, 8);
                        jTableAddRisks.setValueAt(atvList.get(i).getAssetsThreatsVulnId(), row+i, 9);
                        jTableAddRisks.setValueAt(atvList.get(i).getThreats().getThreatId(), row+i, 10);
                        jTableAddRisks.setValueAt(atvList.get(i).getVulnerabilities().getVulnarabilityId(), row+i, 11);
                }

            }

        }
            if (jTableAddRisks.getSelectedColumn()==6 && jTableAddRisks.getValueAt(row, 1)!=null &&
                   jTableAddRisks.getValueAt(row, 4)!=null && jTableAddRisks.getValueAt(row, 5)!=null)
            {

                float AV = (Float)jTableAddRisks.getValueAt(row, 1);
                int L=(Integer)jTableAddRisks.getValueAt(row, 4);
                int I=(Integer)jTableAddRisks.getValueAt(row, 5);
                float exposure = AV*L*I;
               // System.out.println("Calculation: "+AV+"*"+L+"*"+I);

                jTableAddRisks.setValueAt(exposure, row, 6);

            }
        }
    }//GEN-LAST:event_jTableAddRisksMouseClicked

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Risk_EvaluationFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableAddRisks;
    private javax.swing.JTable jTableRisksRegister;
    // End of variables declaration//GEN-END:variables
    MyItemListener it;
    CheckBoxHeader cbh;
    CheckBoxHeader rendererComponent;
    DefaultTableModel dtm;
      Projects projects;
    //private javax.swing.JComboBox jComboBoxAssetList = new JComboBox(new DefaultComboBoxModel(getAssetNameList()));
    private javax.swing.JComboBox jComboBoxAssetList ;



//*****************************************************My methods****************
private RiskEvaluation readTableRow(JTable table,int row){
    int i=0;
    if(table == jTableAddRisks){
     i=2;
    }
    AssetsThreatsVuln asv = new AssetsThreatsVuln();

    RiskEvaluation riskEvaluation = new RiskEvaluation();
    //System.out.println("Searching for Row: "+row+"Column:"+(2-i)+"value: "+;
    try {
    riskEvaluation.getAssetsThreatsVuln().getAssets().setAssetsName((String)table.getValueAt(row, 2-i));

    riskEvaluation.getAssetsThreatsVuln().getAssets().setAssetsValue((Float)table.getValueAt(row, 3-i));


//    riskEvaluation.getAssetsThreatsVuln().getThreats().setThreatType((String)table.getValueAt(row, 4-i));
    riskEvaluation.getAssetsThreatsVuln().getThreats().setThreatName((String)table.getValueAt(row, 4-i));
    riskEvaluation.getAssetsThreatsVuln().getVulnerabilities().setVulnarabilityName((String)table.getValueAt(row, 5-i));

    riskEvaluation.setRiskLikelihood((Integer)table.getValueAt(row, 6-i));
    riskEvaluation.setRiskImpact((Integer)table.getValueAt(row, 7-i));
    riskEvaluation.setRiskExposure((Float)table.getValueAt(row, 8-i));
    riskEvaluation.setRiskCategory((String)table.getValueAt(row, 9-i));
    if(table==jTableAddRisks)
        i++;

    riskEvaluation.getAssetsThreatsVuln().getAssets().setAssetId((Integer)table.getValueAt(row, 11-i));
    riskEvaluation.getAssetsThreatsVuln().setAssetsThreatsVulnId((Integer)table.getValueAt(row, 12-i));
    riskEvaluation.getAssetsThreatsVuln().getThreats().setThreatId((Integer)table.getValueAt(row, 13-i));
    riskEvaluation.getAssetsThreatsVuln().getVulnerabilities().setVulnarabilityId((Integer)table.getValueAt(row, 14-i));
    if(table==jTableRisksRegister){
        riskEvaluation.setRiskEvaluationId((Integer)jTableRisksRegister.getValueAt(row, 10));
    }
    System.out.println("Data read from the Table is :"+riskEvaluation);
    }catch (Exception e){
        System.out.println("Data is not enter correctly please check.");
        JOptionPane.showConfirmDialog(this, "Please check Data.. It Seems values are not correct!","Error",JOptionPane.DEFAULT_OPTION);
    }
    return riskEvaluation;

}
private String[] getAssetNameList(){

    //String query="Select assetsName from Assets";//where projectId=project.getProjectId()
    System.out.println("Project ID id asset list: "+projects.getProjectId());
     String query="Select assetsName from Assets where projectId.projectId = "+projects.getProjectId();//where projectId=project.getProjectId()
    String[] assetNamesList = MySQLDAOFactory.getDAOFactory().getAssetsDao().fetchAssetsCol(query);

    if(assetNamesList!=null)
        return assetNamesList;
    assetNamesList[0]="null";
    return assetNamesList;
}
private String[] getVulnList(){

    List<Vulnarabilities> vulList = new ArrayList<Vulnarabilities>();
        vulList=MySQLDAOFactory.getDAOFactory().getVulnDao().fetchVuln("from Vulnarabilities");
    String[] vulnStrList = new String[vulList.size()];
        for(int i=0;i<vulList.size();i++)
            vulnStrList[i]=vulList.get(i).getVulnarabilityName();
        return vulnStrList;
}
private String[] getThreatTypeList(){

        String[] threatsTypeStrList=MySQLDAOFactory.getDAOFactory().getThreatsDao().fetchThreatsCol("Select distinct threatType from Threats");

        if(threatsTypeStrList!=null) {
            for(String i:threatsTypeStrList){
             //   System.out.println("Feched list:"+i);
            }
        }
        return threatsTypeStrList;
}
private String[] getThreatsList(){

    List<Threats> threatList = new ArrayList<Threats>();
        threatList=MySQLDAOFactory.getDAOFactory().getThreatsDao().fetchThreats("from Threats");
    String[] threatsStrList = new String[threatList.size()];
        for(int i=0;i<threatList.size();i++)
            threatsStrList[i]=threatList.get(i).getThreatName();
        return threatsStrList;

}
private void loadTable(JTable table) {

//
        List<RiskEvaluation> riskEvaluation = new ArrayList<RiskEvaluation>();

        riskEvaluation = MySQLDAOFactory.getDAOFactory().getRiskEvaluationDao().fetchRiskEvaluation("from RiskEvaluation");
        for(int i=0;i<riskEvaluation.size();i++)
        {
            if ( table.getModel().getRowCount() < riskEvaluation.size() ) {
                @SuppressWarnings("BooleanConstructorCall")
                Object[][] rowData = {{new Boolean(false), null, null, null,null,null}};
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.addRow(rowData[0]);
                if ((table.getModel().getRowCount() - 1) == riskEvaluation.size()) {
                    model.setValueAt(i+1,i,1);
                }
            }

            table.getModel().setValueAt(i+1, i, 1);
            table.getModel().setValueAt(riskEvaluation.get(i).getAssetsThreatsVuln().getAssets().getAssetsName(), i, 2);
            table.getModel().setValueAt(riskEvaluation.get(i).getAssetsThreatsVuln().getAssets().getAssetsValue(), i, 3);

               //Load other fields threts and Vulnerabilityr
                table.setValueAt(riskEvaluation.get(i).getAssetsThreatsVuln().getThreats().getThreatName(), i, 4);
                table.setValueAt(riskEvaluation.get(i).getAssetsThreatsVuln().getVulnerabilities().getVulnarabilityName(), i,5);
//                threatList.add(assetThreatsVulnList.get(j).getThreats().getThreatName());
                table.setValueAt(riskEvaluation.get(i).getRiskLikelihood(), i, 6);

                //Set Invisible columns
                table.setValueAt(riskEvaluation.get(i).getRiskImpact(), i, 7);
                table.setValueAt(riskEvaluation.get(i).getRiskExposure(), i, 8);
                table.setValueAt(riskEvaluation.get(i).getRiskCategory(), i, 9);
                table.setValueAt(riskEvaluation.get(i).getRiskEvaluationId(), i, 10);
                table.setValueAt(riskEvaluation.get(i).getAssetsThreatsVuln().getAssets().getAssetId(), i, 11);
                table.setValueAt(riskEvaluation.get(i).getAssetsThreatsVuln().getAssetsThreatsVulnId(), i, 12);
                table.setValueAt(riskEvaluation.get(i).getAssetsThreatsVuln().getThreats().getThreatId(), i, 13);
                table.setValueAt(riskEvaluation.get(i).getAssetsThreatsVuln().getVulnerabilities().getVulnarabilityId(), i, 14);
                
           }
        if (riskEvaluation.size() > 0) {
            System.out.println("Database contents delivered...");
        } else {
            System.out.println("Table was empty...");
        }
    }

//------------------ for Select All column---------------------------
    class MyItemListener implements ItemListener {

        public void itemStateChanged(ItemEvent e) {
            Object source = e.getSource();
            if (source instanceof AbstractButton == false) {
                return;
            }
            boolean checked = e.getStateChange() == ItemEvent.SELECTED;
            for (int x = 0, y = jTableRisksRegister.getRowCount(); x < y; x++) {
                jTableRisksRegister.setValueAt(new Boolean(checked), x, 0);
            }
        }
    }

    class CheckBoxHeader extends JCheckBox implements TableCellRenderer, MouseListener {

        protected int column;
        protected boolean mousePressed = false;
        ItemListener it1;

        public CheckBoxHeader(ItemListener itemListener) {
            setRendererComponent(this);
            this.it1 = itemListener;
            rendererComponent.addItemListener(it1);

            setHorizontalAlignment(SwingConstants.CENTER);
            setOpaque(true);

            // This call is needed because DefaultTableCellRenderer calls setBorder()
            // in its constructor, which is executed after updateUI()
            setBorder(UIManager.getBorder("TableHeader.cellBorder"));



        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (table != null) {
                JTableHeader header = table.getTableHeader();
                if (header != null) {
                    rendererComponent.setForeground(header.getForeground());
                    rendererComponent.setBackground(header.getBackground());
                    rendererComponent.setFont(header.getFont());
                    header.addMouseListener(rendererComponent);
                }
            }
            setColumn(column);
            setBorder(UIManager.getBorder("TableHeader.cellBorder"));
            return rendererComponent;
        }

        protected void setColumn(int column) {
            this.column = column;
        }

        public int getColumn() {
            return column;
        }

        protected void handleClickEvent(MouseEvent e) {
            if (mousePressed) {
                mousePressed = false;

                JTableHeader header = (JTableHeader) (e.getSource());
                JTable tableView = header.getTable();


                TableColumnModel columnModel = tableView.getColumnModel();
                int viewColumn = columnModel.getColumnIndexAtX(e.getX());
                int column = tableView.convertColumnIndexToModel(viewColumn);
                if (viewColumn == this.column && e.getClickCount() == 1 && column != -1) {
                    doClick();
                }
            }
        }

        public void mouseClicked(MouseEvent e) {
            handleClickEvent(e);
            ((JTableHeader) e.getSource()).repaint();
        }

        public void mousePressed(MouseEvent e) {
            mousePressed = true;
        }

        public void mouseReleased(MouseEvent e) {
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }
    }

    public CheckBoxHeader getRendererComponent() {
        return rendererComponent;
    }

    public void setRendererComponent(CheckBoxHeader rendererComponent) {
        //rendererComponent.setText("Check All");

        this.rendererComponent = rendererComponent;
    }

    class MyMouseListener extends MouseAdapter {

        public void mouseClicked(MouseEvent mouseEvent) {
            int checkedCount = 0;
            rendererComponent.removeItemListener(it);
            if (rendererComponent instanceof JCheckBox) {
                boolean[] flags = new boolean[jTableRisksRegister.getRowCount()];
                for (int i = 0; i < jTableRisksRegister.getRowCount(); i++) {
                    flags[i] = ((Boolean) jTableRisksRegister.getValueAt(i, 0)).booleanValue();
//                    //flags[i]=(Boolean)jTableRisksRegister.getModel().getValueAt(i, 0);
//                    System.out.println("Checkbox Values are"+jTableRisksRegister.getModel().getValueAt(i, 0));
                    if (flags[i]) {
                        checkedCount++;
                    }
                }
                if (checkedCount == jTableRisksRegister.getRowCount()) {
                    ((JCheckBox) rendererComponent).setSelected(true);
                }
                if (checkedCount != jTableRisksRegister.getRowCount()) {
                    ((JCheckBox) rendererComponent).setSelected(false);
                }
            }
            rendererComponent.addItemListener(it);
            jTableRisksRegister.getTableHeader().repaint();
        }
    }

//------------------- code fo Select All Column Ends here -------------

//*************************************Methods ends*****************************


}

