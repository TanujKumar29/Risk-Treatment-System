package com.rts.gui_final;

import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;

import com.rts.util.Config;
import com.rts.dao.daofactory.MySQLDAOFactory;
import com.rts.dao.interfaces.SFRiskResidualDao;
import com.rts.pojoclasses.SFAssetsThreatsVuln;
import com.rts.pojoclasses.SFRiskEvaluation;
import com.rts.pojoclasses.SFRiskTreatment;
import com.rts.pojoclasses.SFRiskResidual;
import com.rts.pojoclasses.SFThreats;
import com.rts.pojoclasses.SFVulnarabilities;
import com.rts.pojoclasses.SF_Assets;

import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Risk_TreatmentFrame.java
 *
 * Created on Aug 23, 2012, 3:08:40 PM
 */

/**
 *
 * @author bhandrah
 */
public class SFRisk_ResidualFrame extends javax.swing.JFrame {

    /** Creates new form Risk_TreatmentFrame */
    public SFRisk_ResidualFrame() {
        initComponents();
        loadTable(jTableRisksResidualRegister);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAddRiskResidual = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButtonReset2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableRisksResidualRegister = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(204, 255, 255)));

        jTableAddRiskResidual.setAutoCreateRowSorter(true);
        jTableAddRiskResidual.setBackground(new java.awt.Color(255, 204, 204));
        jTableAddRiskResidual.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Asset Name", "Threat", "Vulnerability", "Risk Category", "Risk Exposure", "Risk Treatment Approach", "Control Measure", "Comment", "RiskEvaluationId", "ThreatVulnId", "ThreatId", "VulnId", "AssetId", "Asset Value", "Residual Impact", "Residual Likelihood", "Residual Exposure", "Residual Category"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, false, true, false, false, false, false, false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAddRiskResidual.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(jComboBoxAssetList));

        jTableAddRiskResidual.getColumnModel().getColumn(5).setCellEditor(new DefaultCellEditor(jComboBoxTreatList));

        jTableAddRiskResidual.getColumnModel().getColumn(6).setCellEditor(new DefaultCellEditor(jComboBoxControlList));
        jComboBoxTreatList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxTreatListItemStateChanged(evt);
            }
        });
        jComboBoxTreatList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTreatListActionPerformed(evt);
            }
        });
        //jComboBoxTreatList.addMouseListener(new java.awt.event.MouseAdapter() {
            //    public void mouseClicked(java.awt.event.MouseEvent evt) {
                //        jComboBoxTreatListMouseClicked(evt);
                //    }
            //});
    jListControlList = new javax.swing.JList();

    jListControlList.setModel(new javax.swing.AbstractListModel() {
        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
        public int getSize() { return strings.length; }
        public Object getElementAt(int i) { return strings[i]; }
    });

    jScrollPane1.setViewportView(jListControlList);
    jTableAddRiskResidual.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jTableAddRiskResidualMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(jTableAddRiskResidual);
    jTableAddRiskResidual.getColumnModel().getColumn(0).setPreferredWidth(30);
    jTableAddRiskResidual.getColumnModel().getColumn(1).setPreferredWidth(30);
    jTableAddRiskResidual.getColumnModel().getColumn(2).setPreferredWidth(30);
    jTableAddRiskResidual.getColumnModel().getColumn(3).setPreferredWidth(40);
    jTableAddRiskResidual.getColumnModel().getColumn(4).setPreferredWidth(30);
    jTableAddRiskResidual.getColumnModel().getColumn(5).setPreferredWidth(30);
    jTableAddRiskResidual.getColumnModel().getColumn(6).setPreferredWidth(30);
    jTableAddRiskResidual.getColumnModel().getColumn(7).setMinWidth(30);
    jTableAddRiskResidual.getColumnModel().getColumn(7).setPreferredWidth(30);
    jTableAddRiskResidual.getColumnModel().getColumn(7).setMaxWidth(30);
    jTableAddRiskResidual.getColumnModel().getColumn(8).setMinWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(8).setPreferredWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(8).setMaxWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(9).setMinWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(9).setPreferredWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(9).setMaxWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(10).setMinWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(10).setPreferredWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(10).setMaxWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(11).setMinWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(11).setPreferredWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(11).setMaxWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(12).setMinWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(12).setPreferredWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(12).setMaxWidth(0);
    jTableAddRiskResidual.getColumnModel().getColumn(13).setMinWidth(20);
    jTableAddRiskResidual.getColumnModel().getColumn(13).setPreferredWidth(20);
    jTableAddRiskResidual.getColumnModel().getColumn(13).setMaxWidth(20);
    jTableAddRiskResidual.getColumnModel().getColumn(14).setMinWidth(50);
    jTableAddRiskResidual.getColumnModel().getColumn(14).setPreferredWidth(50);
    jTableAddRiskResidual.getColumnModel().getColumn(14).setMaxWidth(50);
    jTableAddRiskResidual.getColumnModel().getColumn(15).setMinWidth(30);
    jTableAddRiskResidual.getColumnModel().getColumn(15).setPreferredWidth(30);
    jTableAddRiskResidual.getColumnModel().getColumn(15).setMaxWidth(30);
    jTableAddRiskResidual.getColumnModel().getColumn(16).setMinWidth(20);
    jTableAddRiskResidual.getColumnModel().getColumn(16).setPreferredWidth(20);
    jTableAddRiskResidual.getColumnModel().getColumn(16).setMaxWidth(20);
    jTableAddRiskResidual.getColumnModel().getColumn(17).setMinWidth(20);
    jTableAddRiskResidual.getColumnModel().getColumn(17).setPreferredWidth(20);
    jTableAddRiskResidual.getColumnModel().getColumn(17).setMaxWidth(20);

    jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18));
    jLabel2.setText("Enter Risk Residual");

    jButton1.setText("Add");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    jButtonReset2.setText("Reset");
    jButtonReset2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonReset2ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(355, 355, 355)
                    .addComponent(jLabel2))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButtonReset2))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 959, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(29, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel2)
            .addGap(24, 24, 24)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton1)
                .addComponent(jButtonReset2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(23, Short.MAX_VALUE))
    );

    jPanel2.setBackground(new java.awt.Color(255, 255, 255));
    jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(255, 204, 204)));

    jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18));
    jLabel3.setText("Risk Residual");

    jTableRisksResidualRegister.setAutoCreateRowSorter(true);
    jTableRisksResidualRegister.setBackground(new java.awt.Color(204, 255, 255));
    jTableRisksResidualRegister.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
        },
        new String [] {
            "", "Index", "Asset Name", "Threat", "Vulnerability", "Risk Category", "Risk Exposure", "Risk Treatment", "Control Measure", "Comment", "RiskEvaluationId", "ThreatVulnId", "ThreatId", "VulnId", "AssetId", "RiskTreatmentId", "Asset Value", "Residual Impact", "Residual Likelihood", "Residual Exposure", "Residual Category"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            true, false, true, false, false, false, false, true, true, true, false, false, false, false, false, true, true, true, true, true, true
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    TableColumn tc = jTableRisksResidualRegister.getColumnModel().getColumn(0);
    tc.setCellEditor(jTableRisksResidualRegister.getDefaultEditor(Boolean.class));
    tc.setCellRenderer(jTableRisksResidualRegister.getDefaultRenderer(Boolean.class));
    jTableRisksResidualRegister.addMouseListener(new MyMouseListener());
    it = new MyItemListener();
    cbh = new CheckBoxHeader(it);
    tc.setHeaderRenderer(cbh);
    jTableRisksResidualRegister.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(jComboBoxAssetList));
    jTableRisksResidualRegister.getColumnModel().getColumn(7).setCellEditor(new DefaultCellEditor(jComboBoxTreatList));
    jScrollPane2.setViewportView(jTableRisksResidualRegister);
    jTableRisksResidualRegister.getColumnModel().getColumn(0).setPreferredWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(2).setPreferredWidth(60);
    jTableRisksResidualRegister.getColumnModel().getColumn(3).setPreferredWidth(60);
    jTableRisksResidualRegister.getColumnModel().getColumn(10).setMinWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(10).setPreferredWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(10).setMaxWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(11).setMinWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(11).setPreferredWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(11).setMaxWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(12).setMinWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(12).setPreferredWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(12).setMaxWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(13).setMinWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(13).setPreferredWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(13).setMaxWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(14).setMinWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(14).setPreferredWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(14).setMaxWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(15).setMinWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(15).setPreferredWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(15).setMaxWidth(0);
    jTableRisksResidualRegister.getColumnModel().getColumn(16).setMinWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(16).setPreferredWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(16).setMaxWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(17).setMinWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(17).setPreferredWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(17).setMaxWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(18).setMinWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(18).setPreferredWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(18).setMaxWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(19).setMinWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(19).setPreferredWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(19).setMaxWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(20).setMinWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(20).setPreferredWidth(20);
    jTableRisksResidualRegister.getColumnModel().getColumn(20).setMaxWidth(20);

    jButton2.setText("Update");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    jButton6.setText("Delete");
    jButton6.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton6ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(367, 367, 367)
                    .addComponent(jLabel3))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jButton2)
                    .addGap(19, 19, 19)
                    .addComponent(jButton6))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 957, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(31, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton6)
                .addComponent(jButton2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(20, 20, 20))
    );

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addGap(12, 12, 12)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(29, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(32, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        // TODO add your handling code here:
        int res=-1; // To know the Database Operation Status
        List<SFRiskResidual> riskResidual = new ArrayList<SFRiskResidual>();
        for(int i=0;i<jTableAddRiskResidual.getRowCount();i++){
            if(jTableAddRiskResidual.getValueAt(i, 1)!=null && jTableAddRiskResidual.getValueAt(i, 6)!=null) {
            res=-1;
            //System.out.println("Risks:"+jTableAddRiskTreatment.getValueAt(0, 0));
            riskResidual.add(readTableRow(jTableAddRiskResidual, i));
            System.out.println("Abt to read Row:"+i);
//            if(riskTreatment.get(i).getRiskEvaluation().getSfassetsThreatsVuln().getThreats().getThreatName()==null ||
//                    riskTreatment.get(i).getRiskEvaluation().getSfassetsThreatsVuln().getVulnerabilities().getVulnarabilityName()==null)
            if(riskResidual.get(i).getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getThreats().getThreatName()==null ||
                    riskResidual.get(i).getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getVulnerabilities().getVulnarabilityName()==null)
            {
                JOptionPane.showConfirmDialog(this,"Error", "Please select Threat and vulnerability for Row: "+i,JOptionPane.DEFAULT_OPTION);
                return;
            }
            if(riskResidual.get(i).getRiskTreatment().getRiskEvaluation().getRiskCategory()==null ||
                    riskResidual.get(i).getRiskTreatment().getRiskEvaluation().getRiskExposure()==0 ) {
                JOptionPane.showConfirmDialog(this, "Please make sure Category, Exposure are entered for Row: "+i,"Error",JOptionPane.DEFAULT_OPTION);
                return;
            }

         res=MySQLDAOFactory.getDAOFactory().getSFRiskResidualDao().insertSFRiskResidual(riskResidual.get(i));
         System.out.println("Insersion Result:"+res);
        }
        }
        //System.out.println("Waiting here");
        if(res!=-1){

           JOptionPane.showConfirmDialog(this, "Data Inserted into Database Successfully!!","Success",JOptionPane.DEFAULT_OPTION);
           loadTable(jTableRisksResidualRegister);
        }
   

    }//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // TODO add your handling code here:
            // TODO add your handling code here:
        SFRiskResidual riskResidual=new SFRiskResidual();
        //AssetsThreatsVuln asv = new AssetsThreatsVuln();
        String rows=null;
        for(int i=0;i<jTableRisksResidualRegister.getRowCount();i++){
            if((Boolean)jTableRisksResidualRegister.getValueAt(i, 0)==true){
                riskResidual=readTableRow(jTableRisksResidualRegister, i);
                //System.out.println("Threat Type to be Updated:"+riskTreatment.getThreats().getThreatType());
                if(jTableRisksResidualRegister.getValueAt(i, 3)==null||jTableRisksResidualRegister.getValueAt(i, 6)==null
                      ||  jTableRisksResidualRegister.getValueAt(i, 5)==null){
                    JOptionPane.showConfirmDialog(this, "Please Fill All the Columns","Error",JOptionPane.DEFAULT_OPTION);
                } else {

                    int res = MySQLDAOFactory.getDAOFactory().getSFRiskResidualDao().insertSFRiskResidual(riskResidual);
                    if(res!=-1){
                        if(rows==null){ rows = ""+(i+1);}
                        else
                           rows=rows+","+(i+1);
                    }
                }
            }
        }
        if(rows!=null) {
        JOptionPane.showConfirmDialog(this, "Data Updated Successfully for Rows:"+rows,"Success",JOptionPane.DEFAULT_OPTION);
        loadTable(jTableRisksResidualRegister);
        for(int i=0;i<jTableRisksResidualRegister.getRowCount();i++){ jTableRisksResidualRegister.setValueAt(false, i, 0);}
        }

}//GEN-LAST:event_jButton2ActionPerformed

private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
            // TODO add your handling code here:
        int startIndex = -1;
        SFRiskResidualDao riskResidualDao = MySQLDAOFactory.getDAOFactory().getSFRiskResidualDao();
        SFRiskResidual riskResidual=new SFRiskResidual();
        Boolean[] selectColumnVal = new Boolean[jTableRisksResidualRegister.getModel().getRowCount()];

        for (int i = 0; i < jTableRisksResidualRegister.getModel().getRowCount(); i++) {
            selectColumnVal[i] = (Boolean) jTableRisksResidualRegister.getValueAt(i, 0);
        }

        for (int i = (selectColumnVal.length - 1); i >= 0; i--) {
            if (selectColumnVal[i] == true) {
                startIndex = i;

                System.out.println("Row To be Deleted: " + i);
                if (jTableRisksResidualRegister.getValueAt(i, 15)==null) {
                    DefaultTableModel model = (DefaultTableModel) jTableRisksResidualRegister.getModel();
                    model.removeRow(i);
                    continue;
                } else {
                    riskResidual = readTableRow(jTableRisksResidualRegister,i);
                    int row = riskResidualDao.deleteSFRiskResidual(riskResidual);
                    if (row == 0) {
                        System.out.println("Doesn't deleted any row!");
                    } else if (row != 0) {
                        System.out.println("Deleted Row: " + row);
                        DefaultTableModel model = (DefaultTableModel) jTableRisksResidualRegister.getModel();
                        model.removeRow(i);
                    } else if (row == -1) {
                        System.out.println("Error in executing Query");
                    }
                    loadTable(jTableRisksResidualRegister);
                }
            }
        }
//   System.out.println("start index "+startIndex+" total rows:"+jTable2.getModel().getRowCount());
        for (int i = startIndex; i <= jTableRisksResidualRegister.getModel().getRowCount(); i++) {
            if(i>0){
   //         System.out.println("setting " + i + " at " + i);
            jTableRisksResidualRegister.setValueAt(i, i - 1, 1);
            }
        }


}//GEN-LAST:event_jButton6ActionPerformed

private void jTableAddRiskResidualMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAddRiskResidualMouseClicked
    // TODO add your handling code here:
    System.out.println("Mouse is clicked!!");
            String assetName=null;
        int assetId=0;
        float assetValue=0;

        List<SFAssetsThreatsVuln> atvList = new ArrayList<SFAssetsThreatsVuln>();
        List<SFRiskEvaluation> riskEvaluation = new ArrayList<SFRiskEvaluation>();
        List<SFRiskTreatment> riskTreatment = new ArrayList<SFRiskTreatment>();

        int row = jTableAddRiskResidual.getSelectedRow();
        if(jTableAddRiskResidual.getSelectedRowCount()==1){
            if(jTableAddRiskResidual.getSelectedColumn()==1){
                assetName=(String)jTableAddRiskResidual.getValueAt(jTableAddRiskResidual.getSelectedRow(), 0);
                //Fetch corresponding AssetValue and AssetId based on AssetName and ProjectId.
                if(assetName!=null) {
                    List<SF_Assets> aList=new ArrayList<SF_Assets>();
                    //Also Add where ProjectId == projectId clause in the below Query.
                    aList=MySQLDAOFactory.getDAOFactory().getSF_AssetsDao().fetchSF_AssetsListFromDb("from SF_Assets where assetsName='"+assetName+"'");
                    assetId=aList.get(0).getAssetId();
                    //assetValue=aList.get(0).getAssetsValue();

                    

                    //get Threats and Vulnarabilities.
                    String query="from SFAssetsThreatsVuln atv where atv.assets.assetId="+assetId;
                    atvList = MySQLDAOFactory.getDAOFactory().getSFAssetsThreatsVulnDao().fetchSFAssetsThreatsVuln(query);
                    //Load all the Threats and vuln into AddTable.
                   // System.out.println("Number of assets Records"+atvList.size());
                    for(int i=0;i<atvList.size();i++){
                        //Add Rows if required in the table.
                        if ( (jTableAddRiskResidual.getModel().getRowCount()-jTableAddRiskResidual.getSelectedRow()) < atvList.size() ) {
                            @SuppressWarnings("BooleanConstructorCall")
                            Object[][] rowData = {{null, null, null, null,null,null,null, null, null, null,null,null}};
                            DefaultTableModel model = (DefaultTableModel) jTableAddRiskResidual.getModel();
                            model.addRow(rowData[0]);
                            if ((jTableAddRiskResidual.getModel().getRowCount() - 1) == atvList.size()) {
                                //model.setValueAt(table.getModel().getRowCount(), table.getModel().getRowCount() - 1, 1);
                                //index++;
                                model.setValueAt(row+1,row+i,1);
                            }
                        }
                        String q="from SFRiskEvaluation re where re.assetsThreatsVuln.assetsThreatsVulnId="+atvList.get(i).getAssetsThreatsVulnId();
                        riskEvaluation=MySQLDAOFactory.getDAOFactory().getSFRiskEvaluationDao().fetchSFRiskEvaluation(q);
                        System.out.println("Entering AssetName"+assetName+" at Row:"+(row+i));
                        jTableAddRiskResidual.setValueAt(assetName, row+i, 0);
                        //jTableAddRiskTreatment.setValueAt(assetValue, row+i, 1);
                        jTableAddRiskResidual.setValueAt(atvList.get(i).getThreats().getThreatName(), row+i, 1);
                       jTableAddRiskResidual.setValueAt(atvList.get(i).getVulnerabilities().getVulnarabilityName(), row+i, 2);
                       try{
                       jTableAddRiskResidual.setValueAt(riskEvaluation.get(i).getRiskCategory(), row+i, 3);
                       jTableAddRiskResidual.setValueAt(riskEvaluation.get(i).getRiskExposure(), row+i, 4);


                       //set Invisible columns
                        
                        jTableAddRiskResidual.setValueAt(riskEvaluation.get(i).getRiskEvaluationId(), row+i, 8);
                        }
                       catch(Exception e){ System.out.println("This means you have not defined Risk Evaluation for All ATV pairs"+e.getMessage());
                                JOptionPane.showConfirmDialog(this, "This means you have not defined Risk Evaluation for All ATV pairs","Error",JOptionPane.DEFAULT_OPTION);
                        }
                        jTableAddRiskResidual.setValueAt(atvList.get(i).getAssetsThreatsVulnId(), row+i, 9);

                        jTableAddRiskResidual.setValueAt(atvList.get(i).getThreats().getThreatId(), row+i, 10);
                        jTableAddRiskResidual.setValueAt(atvList.get(i).getVulnerabilities().getVulnarabilityId(), row+i, 11);
                        jTableAddRiskResidual.setValueAt(assetId, jTableAddRiskResidual.getSelectedRow(), 12);

                }

            }

//        } if (jTableAddRiskTreatment.getSelectedColumn()==6 && jTableAddRiskTreatment.getValueAt(row, 1)!=null &&
//                   jTableAddRiskTreatment.getValueAt(row, 4)!=null && jTableAddRiskTreatment.getValueAt(row, 5)!=null){
//
//                float AV = (Float)jTableAddRiskTreatment.getValueAt(row, 1);
//                int L=(Integer)jTableAddRiskTreatment.getValueAt(row, 4);
//                int I=(Integer)jTableAddRiskTreatment.getValueAt(row, 5);
//                float exposure = AV*L*I;
//               // System.out.println("Calculation: "+AV+"*"+L+"*"+I);
//
//                jTableAddRiskTreatment.setValueAt(exposure, row, 6);
//
//        }
        } else if(jTableAddRiskResidual.getSelectedColumn()==6){
            if(Config.riskTreatment[0].equals((String)jTableAddRiskResidual.getValueAt(row, 5))){
                //jTableAddRiskTreatment.setValueAt(assetValue, row, called);
                jTableAddRiskResidual.getColumnModel().getColumn(6).setCellEditor(new DefaultCellEditor(jComboBoxTreatList));

            }
        }
    }
}//GEN-LAST:event_jTableAddRiskResidualMouseClicked

private void jButtonReset2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReset2ActionPerformed
    // TODO add your handling code here:
           for(int i=0;i<jTableAddRiskResidual.getRowCount();i++){
            for(int j=0;j<jTableAddRiskResidual.getColumnCount();j++){
                jTableAddRiskResidual.setValueAt(null, i, j);
            }

        }
}//GEN-LAST:event_jButtonReset2ActionPerformed

    /**
    * @param args the command line arguments
    */

    private void jComboBoxTreatListItemStateChanged(java.awt.event.ItemEvent evt) {
        // TODO add your handling code here:
        int row = jTableAddRiskResidual.getSelectedRow();
        if(row >0 && jTableAddRiskResidual.getSelectedRowCount()==1 ){
            
        }
        //System.out.println("Item selection changed"+jComboBoxTreatList.getSelectedItem());
        
            if(row>=0 && jTableAddRiskResidual.getValueAt(row,5)!=null){
             //System.out.println("VAlue:"+jTableAddRiskTreatment.getValueAt(row,5));
                System.out.println("Item state event called:"+jComboBoxTreatList.getSelectedItem() + " For Row"+jTableAddRiskResidual.getSelectedRow()+" Open Window!" );
            if(Config.riskTreatment[0].equals(jComboBoxTreatList.getSelectedItem())){
                System.out.println("You have selected Apply control");


            }
        }
    }

    private void jComboBoxTreatListActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int row=jTableAddRiskResidual.getSelectedRow();
        if(row>=0 && jTableAddRiskResidual.getValueAt(row, 5)==null){
        System.out.println("First Click:"+jTableAddRiskResidual.getValueAt(row, 5)+" Command:"+jComboBoxTreatList.getSelectedItem()+" Open window");
        //System.out.println("Selected Row"+row);

//        jComboBoxTreatList.getSelectedObjects();
       // getComponent("jComboBoxTreatList").getSubmittedValue();
        //getComponen

//        evt.getSource().
//        jComboBoxTreatListActionPerformed(evt);
    //    new java.awt.event.ItemEvent(

        }

    }
    private void jComboBoxTreatListMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        System.out.println("Mouse is clicked over listbox");
        int row = jTableAddRiskResidual.getSelectedRow();
        if (row>=0)
        jTableAddRiskResidual.setValueAt("select", row, 6);
    }
 
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SFRisk_ResidualFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButtonReset2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableAddRiskResidual;
    private javax.swing.JTable jTableRisksResidualRegister;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JList jListControlList;
    MyItemListener it;
    CheckBoxHeader cbh;
    CheckBoxHeader rendererComponent;
    DefaultTableModel dtm;
    private javax.swing.JComboBox jComboBoxAssetList = new JComboBox(new DefaultComboBoxModel(getAssetNameList()));
    private javax.swing.JComboBox jComboBoxTreatList = new JComboBox(new DefaultComboBoxModel(Config.riskTreatment));
    String a[] ={""};
    private javax.swing.JComboBox jComboBoxControlList = new JComboBox(new DefaultComboBoxModel(a));
int called=0;
//*****************************************************My methods****************
private SFRiskResidual readTableRow(JTable table,int row){
    int i=0;
    if(table == jTableAddRiskResidual){
     i=2;
    }
    SFAssetsThreatsVuln asv = new SFAssetsThreatsVuln();
    SFRiskResidual riskResidual=new SFRiskResidual();
    SFRiskTreatment riskTreatment = new SFRiskTreatment();
    //System.out.println("Searching for Row: "+row+"Column:"+(2-i)+"value: "+;
    try {
    riskResidual.getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getAssets().setAssetsName((String)table.getValueAt(row, 2-i));

    //riskTreatment.getRiskEvaluation().getAssetsThreatsVuln().getAssets().setAssetsValue((Float)table.getValueAt(row, 3-i));


//    RiskTreatment.getAssetsThreatsVuln().getThreats().setThreatType((String)table.getValueAt(row, 4-i));
    riskResidual.getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getThreats().setThreatName((String)table.getValueAt(row, 3-i));
    riskResidual.getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getVulnerabilities().setVulnarabilityName((String)table.getValueAt(row, 4-i));

    riskResidual.getRiskTreatment().getRiskEvaluation().setRiskCategory((String)table.getValueAt(row, 5-i));
    riskResidual.getRiskTreatment().getRiskEvaluation().setRiskExposure((Float)table.getValueAt(row, 6-i));
    riskResidual.getRiskTreatment().setRiskTreatmentApproach((String)table.getValueAt(row, 7-i));
    riskResidual.getRiskTreatment().setComment((String)table.getValueAt(row, 8-i));
    riskResidual.getRiskTreatment().setRiskDecisionReason((String)table.getValueAt(row, 9-i));

    riskResidual.getRiskTreatment().getRiskEvaluation().setRiskEvaluationId((Integer)table.getValueAt(row, 10-i));
    riskResidual.getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().setAssetsThreatsVulnId((Integer)table.getValueAt(row, 11-i));
    riskResidual.getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getThreats().setThreatId((Integer)table.getValueAt(row, 13-i));

    riskResidual.getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getVulnerabilities().setVulnarabilityId((Integer)table.getValueAt(row, 11-i));
    riskResidual.getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getAssets().setAssetId((Integer)table.getValueAt(row, 11-i));
    riskResidual.getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().setAssetsThreatsVulnId((Integer)table.getValueAt(row, 12-i));
    
    if(table==jTableRisksResidualRegister){
        riskResidual.getRiskTreatment().setRiskTreatmentId((Integer)jTableRisksResidualRegister.getValueAt(row, 15));
    }
    System.out.println("Data read from the Table is :"+riskResidual);
    }catch (Exception e){
        System.out.println("Data is not enter correctly please check.");
        JOptionPane.showConfirmDialog(this, "Please check Data.. It Seems values are not correct!","Error",JOptionPane.DEFAULT_OPTION);
    }
    return riskResidual;

}
private String[] getAssetNameList(){

    String query="Select assetsName from SF_Assets";//where projectId=project.getProjectId()
    String[] assetNamesList = MySQLDAOFactory.getDAOFactory().getSF_AssetsDao().fetchSF_AssetsCol(query);

    if(assetNamesList!=null)
        return assetNamesList;
    assetNamesList[0]="null";
    return assetNamesList;
}
private String[] getSFVulnList(){

    List<SFVulnarabilities> vulList = new ArrayList<SFVulnarabilities>();
        vulList=MySQLDAOFactory.getDAOFactory().getSFVulnDao().fetchSFVuln("from SFVulnarabilities");
    String[] vulnStrList = new String[vulList.size()];
        for(int i=0;i<vulList.size();i++)
            vulnStrList[i]=vulList.get(i).getVulnarabilityName();
        return vulnStrList;
}
private String[] getThreatTypeList(){

        String[] threatsTypeStrList=MySQLDAOFactory.getDAOFactory().getSFThreatsDao().fetchSFThreatsCol("Select distinct threatType from SFThreats");

        if(threatsTypeStrList!=null) {
            for(String i:threatsTypeStrList){
             //   System.out.println("Feched list:"+i);
            }
        }
        return threatsTypeStrList;
}
private String[] getThreatsList(){

    List<SFThreats> threatList = new ArrayList<SFThreats>();
        threatList=MySQLDAOFactory.getDAOFactory().getSFThreatsDao().fetchSFThreats("from SFThreats");
    String[] threatsStrList = new String[threatList.size()];
        for(int i=0;i<threatList.size();i++)
            threatsStrList[i]=threatList.get(i).getThreatName();
        return threatsStrList;

}
private void loadTable(JTable table) {

//
        List<SFRiskResidual> RiskResidual = new ArrayList<SFRiskResidual>();

        RiskResidual = MySQLDAOFactory.getDAOFactory().getSFRiskResidualDao().fetchSFRiskResidual("from SFRiskResidual");
        for(int i=0;i<RiskResidual.size();i++){
            if ( table.getModel().getRowCount() < RiskResidual.size() ) {
                @SuppressWarnings("BooleanConstructorCall")
                Object[][] rowData = {{new Boolean(false), null, null, null,null,null}};
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.addRow(rowData[0]);
                if ((table.getModel().getRowCount() - 1) == RiskResidual.size()) {
                    model.setValueAt(i+1,i,1);
                }
            }

            table.getModel().setValueAt(i+1, i, 1);
            table.getModel().setValueAt(RiskResidual.get(i).getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getAssets().getAssetsName(), i, 2);


            table.getModel().setValueAt(RiskResidual.get(i).getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getThreats().getThreatName(), i, 3);
            table.getModel().setValueAt(RiskResidual.get(i).getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getVulnerabilities().getVulnarabilityName(), i, 4);

            table.getModel().setValueAt(RiskResidual.get(i).getRiskTreatment().getRiskEvaluation().getRiskCategory(), i, 5);
            table.getModel().setValueAt(RiskResidual.get(i).getRiskTreatment().getRiskEvaluation().getRiskExposure(), i, 6);
            table.getModel().setValueAt(RiskResidual.get(i).getRiskTreatment().getRiskTreatmentApproach(), i, 7);
            table.getModel().setValueAt(RiskResidual.get(i).getRiskTreatment().getRiskDecisionReason(), i, 8);
            table.getModel().setValueAt(RiskResidual.get(i).getRiskTreatment().getComment(), i, 9);
            //Load Invisible Columns
            table.getModel().setValueAt(RiskResidual.get(i).getRiskTreatment().getRiskEvaluation().getRiskEvaluationId(), i, 10);
            table.getModel().setValueAt(RiskResidual.get(i).getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getAssetsThreatsVulnId(), i, 11);
            table.getModel().setValueAt(RiskResidual.get(i).getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getThreats().getThreatId(), i, 12);
            table.getModel().setValueAt(RiskResidual.get(i).getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getVulnerabilities().getVulnarabilityId(), i, 13);
            table.getModel().setValueAt(RiskResidual.get(i).getRiskTreatment().getRiskEvaluation().getSfassetsThreatsVuln().getAssets().getAssetId(), i, 14);

            if(table==jTableRisksResidualRegister){
              table.getModel().setValueAt(RiskResidual.get(i).getRiskTreatment().getRiskTreatmentId(), i, 15);
            }

           }
        if (RiskResidual.size() > 0) {
            System.out.println("Database contents delivered...");
        } else {
            System.out.println("Table was empty...");
        }
    }

//------------------ for Select All column---------------------------
    class MyItemListener implements ItemListener {

        public void itemStateChanged(ItemEvent e) {
            Object source = e.getSource();
            if (source instanceof AbstractButton == false) {
                return;
            }
            boolean checked = e.getStateChange() == ItemEvent.SELECTED;
            for (int x = 0, y = jTableRisksResidualRegister.getRowCount(); x < y; x++) {
                jTableRisksResidualRegister.setValueAt(new Boolean(checked), x, 0);
            }
        }
    }

    class CheckBoxHeader extends JCheckBox implements TableCellRenderer, MouseListener {

        protected int column;
        protected boolean mousePressed = false;
        ItemListener it1;

        public CheckBoxHeader(ItemListener itemListener) {
            setRendererComponent(this);
            this.it1 = itemListener;
            rendererComponent.addItemListener(it1);

            setHorizontalAlignment(SwingConstants.CENTER);
            setOpaque(true);

            // This call is needed because DefaultTableCellRenderer calls setBorder()
            // in its constructor, which is executed after updateUI()
            setBorder(UIManager.getBorder("TableHeader.cellBorder"));



        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (table != null) {
                JTableHeader header = table.getTableHeader();
                if (header != null) {
                    rendererComponent.setForeground(header.getForeground());
                    rendererComponent.setBackground(header.getBackground());
                    rendererComponent.setFont(header.getFont());
                    header.addMouseListener(rendererComponent);
                }
            }
            setColumn(column);
            setBorder(UIManager.getBorder("TableHeader.cellBorder"));
            return rendererComponent;
        }

        protected void setColumn(int column) {
            this.column = column;
        }

        public int getColumn() {
            return column;
        }

        protected void handleClickEvent(MouseEvent e) {
            if (mousePressed) {
                mousePressed = false;

                JTableHeader header = (JTableHeader) (e.getSource());
                JTable tableView = header.getTable();


                TableColumnModel columnModel = tableView.getColumnModel();
                int viewColumn = columnModel.getColumnIndexAtX(e.getX());
                int column = tableView.convertColumnIndexToModel(viewColumn);
                if (viewColumn == this.column && e.getClickCount() == 1 && column != -1) {
                    doClick();
                }
            }
        }

        public void mouseClicked(MouseEvent e) {
            handleClickEvent(e);
            ((JTableHeader) e.getSource()).repaint();
        }

        public void mousePressed(MouseEvent e) {
            mousePressed = true;
        }

        public void mouseReleased(MouseEvent e) {
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }
    }

    public CheckBoxHeader getRendererComponent() {
        return rendererComponent;
    }

    public void setRendererComponent(CheckBoxHeader rendererComponent) {
        //rendererComponent.setText("Check All");

        this.rendererComponent = rendererComponent;
    }

    class MyMouseListener extends MouseAdapter {

        public void mouseClicked(MouseEvent mouseEvent) {
            int checkedCount = 0;
            rendererComponent.removeItemListener(it);
            if (rendererComponent instanceof JCheckBox) {
                boolean[] flags = new boolean[jTableRisksResidualRegister.getRowCount()];
                for (int i = 0; i < jTableRisksResidualRegister.getRowCount(); i++) {
                    flags[i] = ((Boolean) jTableRisksResidualRegister.getValueAt(i, 0)).booleanValue();
//                    //flags[i]=(Boolean)jTableRisksTreatmentRegister.getModel().getValueAt(i, 0);
//                    System.out.println("Checkbox Values are"+jTableRisksTreatmentRegister.getModel().getValueAt(i, 0));
                    if (flags[i]) {
                        checkedCount++;
                    }
                }
                if (checkedCount == jTableRisksResidualRegister.getRowCount()) {
                    ((JCheckBox) rendererComponent).setSelected(true);
                }
                if (checkedCount != jTableRisksResidualRegister.getRowCount()) {
                    ((JCheckBox) rendererComponent).setSelected(false);
                }
            }
            rendererComponent.addItemListener(it);
            jTableRisksResidualRegister.getTableHeader().repaint();
        }
    }

//------------------- code fo Select All Column Ends here -------------

//*************************************Methods ends*****************************



}
