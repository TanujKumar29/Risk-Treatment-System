package com.rts.gui_final;

import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import com.rts.util.Config;
import com.rts.dao.daofactory.MySQLDAOFactory;
import com.rts.dao.interfaces.AssetsDao;
import com.rts.pojoclasses.Assets;
import com.rts.pojoclasses.Projects;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.List;
import javax.swing.AbstractButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Asset.java
 *
 * Created on Aug 22, 2012, 10:41:53 PM
 */
/**
 *
 * This class manages all project related assets inside Business Units.
 * @author bhandrah
 *
 */
public class Asset extends javax.swing.JFrame {

    Projects projects;

    public Asset() {

        initComponents();
        loadTable(jTableAssetRegister);
    }

    public Asset(Projects projects) {
        this.projects = projects;
        System.out.print("inside asset constructor");

        initComponents();
        loadTable(jTableAssetRegister);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableNewAsset = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableAssetRegister = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setAutoscrolls(true);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(204, 255, 255)));
        jPanel2.setVisible(true);

        jButton2.setText("Add");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel3.setText("Enter Asset Details");

        jTableNewAsset.setAutoCreateRowSorter(true);
        jTableNewAsset.setBackground(new java.awt.Color(255, 204, 204));
        jTableNewAsset.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Asset Name", "AssetType", "AssetOwner", "AssetDescription", "Confidentiality", "Integrity", "Availability", "Asset Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        Config cg=new Config();
        jTableNewAsset.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(
            new JComboBox(new DefaultComboBoxModel(new String[] {
                cg.arr[0],
                cg.arr[1],
                cg.arr[2],
                cg.arr[3],
                cg.arr[4]
            }))));

            jTableNewAsset.getColumnModel().getColumn(5).setCellEditor(new DefaultCellEditor(
                new JComboBox(new DefaultComboBoxModel(new String[] {
                    cg.arr[0],
                    cg.arr[1],
                    cg.arr[2],
                    cg.arr[3],
                    cg.arr[4]
                }))));
                jTableNewAsset.getColumnModel().getColumn(6).setCellEditor(new DefaultCellEditor(
                    new JComboBox(new DefaultComboBoxModel(new String[] {
                        cg.arr[0],
                        cg.arr[1],
                        cg.arr[2],
                        cg.arr[3],
                        cg.arr[4]
                    }))));
                    System.out.println("value of string"+jTableNewAsset.getModel().getValueAt(0,2));
                    /*System.out.println("value of string"+s);
                    String s1=jTableNewAsset.getModel().getValueAt(0,3);
                    System.out.println("value of string"+s1);
                    String s2=jTableNewAsset.getModel().getValueAt(0,4);
                    System.out.println("value of string"+s2);*/
                    jTableNewAsset.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            jTableNewAssetMouseClicked(evt);
                        }
                    });
                    jScrollPane4.setViewportView(jTableNewAsset);
                    jTableNewAsset.getColumnModel().getColumn(0).setPreferredWidth(60);
                    jTableNewAsset.getColumnModel().getColumn(4).setPreferredWidth(40);
                    jTableNewAsset.getColumnModel().getColumn(5).setPreferredWidth(40);
                    jTableNewAsset.getColumnModel().getColumn(6).setPreferredWidth(40);

                    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
                    jPanel2.setLayout(jPanel2Layout);
                    jPanel2Layout.setHorizontalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addContainerGap(441, Short.MAX_VALUE)
                            .addComponent(jLabel3)
                            .addGap(410, 410, 410))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(31, 31, 31)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 917, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addContainerGap(819, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(103, 103, 103))
                    );
                    jPanel2Layout.setVerticalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(19, 19, 19)
                            .addComponent(jLabel3)
                            .addGap(76, 76, 76)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton2)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    );

                    jPanel3.setBackground(new java.awt.Color(255, 255, 255));
                    jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(255, 204, 204)));
                    jPanel3.setVisible(true);

                    jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18));
                    jLabel2.setText("Asset Register");

                    jButton1.setText("Update");
                    jButton1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jButton1ActionPerformed(evt);
                        }
                    });

                    jButton3.setText("Delete");
                    jButton3.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jButton3ActionPerformed(evt);
                        }
                    });

                    jTableAssetRegister.setAutoCreateRowSorter(true);
                    jTableAssetRegister.setBackground(new java.awt.Color(204, 255, 255));
                    jTableAssetRegister.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                            {null, null, null, null, null, null, null, null, null, null, null, null},
                            {null, null, null, null, null, null, null, null, null, null, null, null},
                            {null, null, null, null, null, null, null, null, null, null, null, null},
                            {new Boolean(false), null, null, null, null, null, null, null, null, null, null, null}
                        },
                        new String [] {
                            "Select", "Index", "Asset Name", "AssetType", "AssetOwner", "AssetDesc", "Confidentiality", "Integrity", "Availability", "Asset Value", "AssetId", "ProjectId"
                        }
                    ) {
                        Class[] types = new Class [] {
                            java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Integer.class
                        };
                        boolean[] canEdit = new boolean [] {
                            true, false, true, true, true, true, true, true, true, true, false, false
                        };

                        public Class getColumnClass(int columnIndex) {
                            return types [columnIndex];
                        }

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit [columnIndex];
                        }
                    });
                    jTableAssetRegister.getColumnModel().getColumn(6).setCellEditor(new DefaultCellEditor(
                        new JComboBox(new DefaultComboBoxModel(new String[] {
                            cg.arr[0],
                            cg.arr[1],
                            cg.arr[2],
                            cg.arr[3],
                            cg.arr[4]
                        }))));
                        jTableAssetRegister.getColumnModel().getColumn(7).setCellEditor(new DefaultCellEditor(
                            new JComboBox(new DefaultComboBoxModel(new String[] {
                                cg.arr[0],
                                cg.arr[1],
                                cg.arr[2],
                                cg.arr[3],
                                cg.arr[4]
                            }))));
                            jTableAssetRegister.getColumnModel().getColumn(8).setCellEditor(new DefaultCellEditor(
                                new JComboBox(new DefaultComboBoxModel(new String[] {
                                    cg.arr[0],
                                    cg.arr[1],
                                    cg.arr[2],
                                    cg.arr[3],
                                    cg.arr[4]
                                }))));
                                TableColumn tc = jTableAssetRegister.getColumnModel().getColumn(0);
                                tc.setCellEditor(jTableAssetRegister.getDefaultEditor(Boolean.class));
                                tc.setCellRenderer(jTableAssetRegister.getDefaultRenderer(Boolean.class));
                                jTableAssetRegister.addMouseListener(new MyMouseListener());
                                it = new MyItemListener();
                                cbh = new CheckBoxHeader(it);
                                tc.setHeaderRenderer(cbh);
                                jTableAssetRegister.addMouseListener(new java.awt.event.MouseAdapter() {
                                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                                        jTableAssetRegisterMouseClicked(evt);
                                    }
                                });
                                jScrollPane5.setViewportView(jTableAssetRegister);
                                jTableAssetRegister.getColumnModel().getColumn(0).setPreferredWidth(20);
                                jTableAssetRegister.getColumnModel().getColumn(1).setPreferredWidth(2);
                                jTableAssetRegister.getColumnModel().getColumn(2).setPreferredWidth(60);
                                jTableAssetRegister.getColumnModel().getColumn(6).setPreferredWidth(40);
                                jTableAssetRegister.getColumnModel().getColumn(7).setPreferredWidth(40);
                                jTableAssetRegister.getColumnModel().getColumn(8).setPreferredWidth(40);
                                jTableAssetRegister.getColumnModel().getColumn(10).setMinWidth(0);
                                jTableAssetRegister.getColumnModel().getColumn(10).setPreferredWidth(0);
                                jTableAssetRegister.getColumnModel().getColumn(10).setMaxWidth(0);
                                jTableAssetRegister.getColumnModel().getColumn(11).setMinWidth(0);
                                jTableAssetRegister.getColumnModel().getColumn(11).setPreferredWidth(0);
                                jTableAssetRegister.getColumnModel().getColumn(11).setMaxWidth(0);

                                javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
                                jPanel3.setLayout(jPanel3Layout);
                                jPanel3Layout.setHorizontalGroup(
                                    jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(370, 370, 370)
                                                .addComponent(jLabel2))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(30, 30, 30)
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(27, 27, 27)
                                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 923, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addContainerGap(70, Short.MAX_VALUE))
                                );
                                jPanel3Layout.setVerticalGroup(
                                    jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jButton3)
                                            .addComponent(jButton1))
                                        .addGap(27, 27, 27)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(21, 21, 21))
                                );

                                javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
                                jPanel4.setLayout(jPanel4Layout);
                                jPanel4Layout.setHorizontalGroup(
                                    jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(22, 22, 22))
                                );
                                jPanel4Layout.setVerticalGroup(
                                    jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(26, Short.MAX_VALUE))
                                );

                                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                                getContentPane().setLayout(layout);
                                layout.setHorizontalGroup(
                                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                );
                                layout.setVerticalGroup(
                                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                );

                                pack();
                            }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Assets asset = readTableRow(jTableNewAsset, 0);
        if (asset.getAssetsName() == null) {

            JOptionPane.showConfirmDialog(jPanel2, "Please enter the Asset Name", "Error", JOptionPane.OK_OPTION);
        } else if (jTableNewAsset.getValueAt(0, 4) == null || jTableNewAsset.getValueAt(0, 5) == null || jTableNewAsset.getValueAt(0, 6) == null
                || jTableNewAsset.getValueAt(0, 7) == null) {
            JOptionPane.showConfirmDialog(jPanel2, "Please enter CIA value and click over Asset Value cell to generate Asset Value", "Error", 1);
        } else {
            System.out.println("Writing asset to db - " + asset.toString() + " projectId -" + asset.getProjectId().getProjectId());
            int res = MySQLDAOFactory.getDAOFactory().getAssetsDao().insetAssetsToDb(asset);
            if (res != -1) {
                JOptionPane.showConfirmDialog(jPanel2, "Data inserted into Database Successfull!!", "Success", JOptionPane.DEFAULT_OPTION);
            }
        }
        loadTable(jTableAssetRegister);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTableNewAssetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableNewAssetMouseClicked
        // TODO add your handling code here:
        float c = 0, i = 0, a = 0;

        if (jTableNewAsset.getModel().getValueAt(0, 4) != null) {
            String s1 = (String) jTableNewAsset.getModel().getValueAt(0, 4);
            c = Config.getIntValue(s1);
        }
        if (jTableNewAsset.getModel().getValueAt(0, 5) != null) {
            String s1 = (String) jTableNewAsset.getModel().getValueAt(0, 5);
            i = Config.getIntValue(s1);
        }
        if (jTableNewAsset.getModel().getValueAt(0, 6) != null) {
            String s1 = (String) jTableNewAsset.getModel().getValueAt(0, 6);
            a = Config.getIntValue(s1);
        }
        float asset_value = (c + i + a) / 3;
        float b = (2 + 1 + 2) / 3;
        System.out.println(b);
        System.out.println("Asest Value to be set: " + asset_value + "c:" + c + "i" + i + "a" + a);
        jTableNewAsset.getModel().setValueAt(asset_value, 0, 7);

    }//GEN-LAST:event_jTableNewAssetMouseClicked

    private void jTableAssetRegisterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAssetRegisterMouseClicked
        // TODO add your handling code here:
        float c = 0, i = 0, a = 0;
        //  System.out.println("Inside JButton6 Event");
        int row = jTableAssetRegister.getSelectedRow();
        if (jTableAssetRegister.getModel().getValueAt(row, 6) != null) {
            String s1 = (String) jTableAssetRegister.getModel().getValueAt(row, 6);
            c = Config.getIntValue(s1);
        }
        if (jTableAssetRegister.getModel().getValueAt(row, 7) != null) {
            String s1 = (String) jTableAssetRegister.getModel().getValueAt(row, 7);
            i = Config.getIntValue(s1);
        }
        if (jTableAssetRegister.getModel().getValueAt(row, 8) != null) {
            String s1 = (String) jTableAssetRegister.getModel().getValueAt(row, 8);
            a = Config.getIntValue(s1);
        }
        float asset_value = (c + i + a) / 3;

        System.out.println("Asest Value to be set: " + asset_value + "c:" + c + "i" + i + "a" + a);
        jTableAssetRegister.getModel().setValueAt(asset_value, row, 9);
    }//GEN-LAST:event_jTableAssetRegisterMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Assets asset = new Assets();
        String rows = null;
        for (int i = 0; i < jTableAssetRegister.getRowCount(); i++) {
            if ((Boolean) jTableAssetRegister.getValueAt(i, 0) == true) {
                asset = readTableRow(jTableAssetRegister, i);
                if (jTableAssetRegister.getValueAt(i, 6) == null || jTableAssetRegister.getValueAt(i, 7) == null
                        || jTableAssetRegister.getValueAt(i, 8) == null || jTableAssetRegister.getValueAt(i, 10) == null) {
                    JOptionPane.showConfirmDialog(this, "Please enter the CIA value and click AssetValue cell to calculate AssetValue", "Error", JOptionPane.DEFAULT_OPTION);
                } else {

                    int res = MySQLDAOFactory.getDAOFactory().getAssetsDao().insetAssetsToDb(asset);
                    if (res != -1) {
                        if (rows == null) {
                            rows = "" + (i + 1);
                        } else {
                            rows = rows + "," + (i + 1);
                        }
                    }
                }


            }
        }
        if (rows != null) {
            JOptionPane.showConfirmDialog(this, "Data Updated Successfully for Rows:" + rows, "Success", JOptionPane.DEFAULT_OPTION);
            loadTable(jTableAssetRegister);
            for (int i = 0; i < jTableAssetRegister.getRowCount(); i++) {
                jTableAssetRegister.setValueAt(false, i, 0);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int rowNum[], colNum[];
        int startIndex = -1;
        AssetsDao daoObj = MySQLDAOFactory.getDAOFactory().getAssetsDao();

        Boolean[] selectColumnVal = new Boolean[jTableAssetRegister.getModel().getRowCount()];

        for (int i = 0; i < jTableAssetRegister.getModel().getRowCount(); i++) {
            selectColumnVal[i] = (Boolean) jTableAssetRegister.getValueAt(i, 0);
        }

        for (int i = (selectColumnVal.length - 1); i >= 0; i--) {
            if (selectColumnVal[i] == true) {
                startIndex = i;

                System.out.println("Row To be Deleted: " + i);
                Assets assetObj = readTableRow(jTableAssetRegister, i);
                System.out.println("Readed Row from Table:" + assetObj);
                if (assetObj.getAssetId() == 0) {
                    DefaultTableModel model = (DefaultTableModel) jTableAssetRegister.getModel();
                    model.removeRow(i);
                    continue;
                } else {
                    int row = daoObj.deleteAssetsFromDb(assetObj);
                    if (row == 0) {
                        System.out.println("Doesn't deleted any row!");
                    } else if (row != 0) {
                        System.out.println("Deleted Row: " + row);
                        DefaultTableModel model = (DefaultTableModel) jTableAssetRegister.getModel();
                        model.removeRow(i);
                    } else if (row == -1) {
                        System.out.println("Error in executing Query");
                    }
                    loadTable(jTableAssetRegister);
                }
            }
        }
//   System.out.println("start index "+startIndex+" total rows:"+jTable2.getModel().getRowCount());
        for (int i = startIndex; i <= jTableAssetRegister.getModel().getRowCount(); i++) {
            if (i > 0) {
                System.out.println("setting " + i + " at " + i);
                jTableAssetRegister.setValueAt(i, i - 1, 1);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Asset().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    public javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTableAssetRegister;
    private javax.swing.JTable jTableNewAsset;
    // End of variables declaration//GEN-END:variables
    MyItemListener it;
    CheckBoxHeader cbh;
    CheckBoxHeader rendererComponent;
    DefaultTableModel dtm;

//*****************************************************My methods****************
    private Assets readTableRow(JTable table, int row) {
        int i = 0;
        if (table == jTableNewAsset) {
            i = 2;
        }
        Assets asset = new Assets();
        // Projects prj = new Projects();
        asset.setAssetsName((String) table.getValueAt(row, 2 - i));
        asset.setAssetType((String) table.getValueAt(row, 3 - i));


        asset.setAssetsOwner((String) table.getValueAt(row, 4 - i));
        asset.setAssetsDescription((String) table.getValueAt(row, 5 - i));

        if (table.getValueAt(row, 6 - i) != null) {
            asset.setAssetsConfidentiality(Config.getIntValue((String) table.getValueAt(row, 6 - i)));
        }
        if (table.getValueAt(row, 7 - i) != null) {
            asset.setAssetsIntegrity(Config.getIntValue((String) table.getValueAt(row, 7 - i)));
        }
        if (table.getValueAt(row, 8 - i) != null) {
            asset.setAssetsAvailability(Config.getIntValue((String) table.getValueAt(row, 8 - i)));
        }
        if (table.getValueAt(row, 9 - i) != null) {
            asset.setAssetsValue((Float) table.getValueAt(row, 9 - i));
        }
        if (table != jTableNewAsset) {
            if (table.getValueAt(row, 10) != null) {
                asset.setAssetId((Integer) table.getModel().getValueAt(row, 10));
            }
            if (table.getValueAt(row, 11) != null) {
                projects.setProjectId((Integer) table.getModel().getValueAt(row, 11));
            }
            asset.setProjectId(projects);
        }
        asset.setProjectId(projects);
        return asset;

    }

    private void loadTable(JTable table) {
        AssetsDao dAOObj = MySQLDAOFactory.getDAOFactory().getAssetsDao();
        System.out.println("Asset Dao loaded");
        List<Assets> allAssets = dAOObj.fetchAssetsListFromDb("from Assets where projectId.projectId=" + projects.getProjectId());
        //List <Assets> allAssets = dAOObj.fetchAssetsListFromDb("from ContractReq where assetId = "+asset_id);

        for (int i = 0; i < allAssets.size(); i++)
        {
            if (table.getModel().getRowCount() <= allAssets.size()) //this condition adds new rows if rows are less in UI table
            {
                Object[][] rowData = {{new Boolean(false), null, null, null, null, null, null, null, null, null}};
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.addRow(rowData[0]);

                if ((table.getModel().getRowCount() - 1) == allAssets.size())
                {
                    model.setValueAt(table.getModel().getRowCount(), table.getModel().getRowCount() - 1, 1);
                }

            }
            Assets asset = (Assets) allAssets.get(i);
            // System.out.println("REq"+i+" is:"+req);
            // jTable2.getModel().removeTableModelListener(jTable2);
            System.out.println("Records to put in GUI Table:" + asset);
            table.getModel().setValueAt(i + 1, i, 1);               //index
            table.getModel().setValueAt(asset.getAssetsName(), i, 2);

            table.getModel().setValueAt(asset.getAssetType(), i, 3);
            table.getModel().setValueAt(asset.getAssetsOwner(), i, 4);
            table.getModel().setValueAt(asset.getAssetsDescription(), i, 5);
            table.getModel().setValueAt(Config.getStringValue(asset.getAssetsConfidentiality()), i, 6);
            table.getModel().setValueAt(Config.getStringValue(asset.getAssetsIntegrity()), i, 7);
            table.getModel().setValueAt(Config.getStringValue(asset.getAssetsAvailability()), i, 8);
            table.getModel().setValueAt((float)asset.getAssetsValue(), i, 9);
            //Invisible Columns
            table.getModel().setValueAt(asset.getAssetId(), i, 10);
            table.getModel().setValueAt(asset.getProjectId().getProjectId(), i, 11);
            System.out.println("Inveisible columns AssetID:" + asset.getAssetId() + " ProjectId:" + asset.getProjectId());

//            table.getModel().setValueAt(asset.getAssetThreats(), i, 10);




        }
        if (allAssets.size() > 0) {
            System.out.println("Database contents delivered...");
        } else {
            System.out.println("Table was empty...");
        }
    }

//------------------ for Select All column---------------------------
    class MyItemListener implements ItemListener {

        public void itemStateChanged(ItemEvent e) {
            Object source = e.getSource();
            if (source instanceof AbstractButton == false) {
                return;
            }
            boolean checked = e.getStateChange() == ItemEvent.SELECTED;
            for (int x = 0, y = jTableAssetRegister.getRowCount(); x < y; x++) {
                jTableAssetRegister.setValueAt(new Boolean(checked), x, 0);
            }
        }
    }

    class CheckBoxHeader extends JCheckBox implements TableCellRenderer, MouseListener {

        protected int column;
        protected boolean mousePressed = false;
        ItemListener it1;

        public CheckBoxHeader(ItemListener itemListener) {
            setRendererComponent(this);
            this.it1 = itemListener;
            rendererComponent.addItemListener(it1);

            setHorizontalAlignment(SwingConstants.CENTER);
            setOpaque(true);

            // This call is needed because DefaultTableCellRenderer calls setBorder()
            // in its constructor, which is executed after updateUI()
            setBorder(UIManager.getBorder("TableHeader.cellBorder"));



        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (table != null) {
                JTableHeader header = table.getTableHeader();
                if (header != null) {
                    rendererComponent.setForeground(header.getForeground());
                    rendererComponent.setBackground(header.getBackground());
                    rendererComponent.setFont(header.getFont());
                    header.addMouseListener(rendererComponent);
                }
            }
            setColumn(column);
            setBorder(UIManager.getBorder("TableHeader.cellBorder"));
            return rendererComponent;
        }

        protected void setColumn(int column) {
            this.column = column;
        }

        public int getColumn() {
            return column;
        }

        protected void handleClickEvent(MouseEvent e) {
            if (mousePressed) {
                mousePressed = false;

                JTableHeader header = (JTableHeader) (e.getSource());
                JTable tableView = header.getTable();


                TableColumnModel columnModel = tableView.getColumnModel();
                int viewColumn = columnModel.getColumnIndexAtX(e.getX());
                int column = tableView.convertColumnIndexToModel(viewColumn);
                if (viewColumn == this.column && e.getClickCount() == 1 && column != -1) {
                    doClick();
                }
            }
        }

        public void mouseClicked(MouseEvent e) {
            handleClickEvent(e);
            ((JTableHeader) e.getSource()).repaint();
        }

        public void mousePressed(MouseEvent e) {
            mousePressed = true;
        }

        public void mouseReleased(MouseEvent e) {
        }

        public void mouseEntered(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }
    }

    public CheckBoxHeader getRendererComponent() {
        return rendererComponent;
    }

    public void setRendererComponent(CheckBoxHeader rendererComponent) {
        //rendererComponent.setText("Check All");

        this.rendererComponent = rendererComponent;
    }

    class MyMouseListener extends MouseAdapter {

        public void mouseClicked(MouseEvent mouseEvent) {
            int checkedCount = 0;
            rendererComponent.removeItemListener(it);
            if (rendererComponent instanceof JCheckBox) {
                boolean[] flags = new boolean[jTableAssetRegister.getRowCount()];
                for (int i = 0; i < jTableAssetRegister.getRowCount(); i++) {
                    flags[i] = ((Boolean) jTableAssetRegister.getValueAt(i, 0)).booleanValue();
//                    //flags[i]=(Boolean)jTableAssetRegister.getModel().getValueAt(i, 0);
//                    System.out.println("Checkbox Values are"+jTableAssetRegister.getModel().getValueAt(i, 0));
                    if (flags[i]) {
                        checkedCount++;
                    }
                }
                if (checkedCount == jTableAssetRegister.getRowCount()) {
                    ((JCheckBox) rendererComponent).setSelected(true);
                }
                if (checkedCount != jTableAssetRegister.getRowCount()) {
                    ((JCheckBox) rendererComponent).setSelected(false);
                }
            }
            rendererComponent.addItemListener(it);
            jTableAssetRegister.getTableHeader().repaint();
        }
    }
//------------------- code fo Select All Column Ends here -------------
//*************************************Methods ends******************************
}
