/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ContractualReqMainFrame.java
 *
 * Created on Aug 20, 2012, 7:37:34 PM
 */


package com.rts.gui_final;

/**
 *
 * @author rasanvin
 */

import com.rts.dao.daofactory.MySQLDAOFactory;
import com.rts.dao.interfaces.ContractReqDAO;
import com.rts.pojoclasses.ContractReq;
import com.rts.pojoclasses.Projects;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.event.*;
import java.net.URI;
import javax.swing.*;
import javax.swing.table.*;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;


public class ContractualReqMainFrame extends javax.swing.JFrame {

    Projects projects;
    Tree tree = new Tree();

    
    /** Creates new form ContractualReqMainFrame */
    public ContractualReqMainFrame() {


        initComponents();
        loadTable();


    }
     public ContractualReqMainFrame(Projects project) {

        this.projects=project;
        initComponents();
        loadTable();


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        addRowButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RiskAssessment System");

        jPanel1.setPreferredSize(new java.awt.Dimension(657, 200));
        jPanel1.setRequestFocusEnabled(false);

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Contractual Requirement");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jButton3.setText("Import");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Export");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable2.setAutoCreateRowSorter(true);
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Index", "Control Category", "Clause", "Compliance", "Description", "Owner", "Action", "DeadLine(YYYY--MM-DD)", "Evidance", "Comment", "ContractReqId", "ProjectId"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true, true, true, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(
            new JComboBox(new DefaultComboBoxModel(new String[] {
                "YES",
                "NO",
                "Partial",
                "NA",
                ""
            }))));

            TableColumn tc = jTable2.getColumnModel().getColumn(0);
            tc.setCellEditor(jTable2.getDefaultEditor(Boolean.class));
            tc.setCellRenderer(jTable2.getDefaultRenderer(Boolean.class));
            jTable2.addMouseListener(new MyMouseListener());
            it = new MyItemListener();
            cbh = new CheckBoxHeader(it);
            tc.setHeaderRenderer(cbh);

            TableColumn tc1 = jTable2.getColumnModel().getColumn(9);
            tc1.setCellRenderer(new MyTableCellRenderer());

            //URLRenderer urlRenderer = new URLRenderer();
            //jTable2.setDefaultRenderer(URL.class,urlRenderer);

            //tc.setHeaderRenderer(new JCheckBox());
            jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jTable2MouseClicked(evt);
                }
            });
            jScrollPane2.setViewportView(jTable2);
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable2.getColumnModel().getColumn(0).setCellEditor(jTable2.getDefaultEditor(Boolean.class));
            jTable2.getColumnModel().getColumn(0).setCellRenderer(jTable2.getDefaultRenderer(Boolean.class));
            jTable2.getColumnModel().getColumn(1).setMinWidth(1);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(20);
            jTable2.getColumnModel().getColumn(11).setMinWidth(0);
            jTable2.getColumnModel().getColumn(11).setPreferredWidth(0);
            jTable2.getColumnModel().getColumn(11).setMaxWidth(0);
            jTable2.getColumnModel().getColumn(12).setMinWidth(0);
            jTable2.getColumnModel().getColumn(12).setPreferredWidth(0);
            jTable2.getColumnModel().getColumn(12).setMaxWidth(0);
            jTable2.getSelectionModel().addListSelectionListener(new RowListener());
            jTable2.getColumnModel().getSelectionModel().
            addListSelectionListener(new ColumnListener());

            addRowButton.setText("Add Row");
            addRowButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    addRowButtonActionPerformed(evt);
                }
            });

            deleteButton.setText("Delete");
            deleteButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    deleteButtonActionPerformed(evt);
                }
            });

            jButton1.setText("View Template");
            jButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(160, 160, 160)
                            .addComponent(jLabel1))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(67, 67, 67)
                            .addComponent(jButton3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton5)
                            .addGap(18, 18, 18)
                            .addComponent(jButton1)
                            .addGap(56, 56, 56)
                            .addComponent(addRowButton)
                            .addGap(18, 18, 18)
                            .addComponent(deleteButton)
                            .addGap(65, 65, 65)
                            .addComponent(saveButton))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(20, Short.MAX_VALUE))
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(33, 33, 33)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(saveButton)
                        .addComponent(deleteButton)
                        .addComponent(addRowButton)
                        .addComponent(jButton5)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 798, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(40, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        //loadTable();
        Boolean[] selectedRows = new Boolean [jTable2.getRowCount()];

     
        ContractReqDAO dAO =  MySQLDAOFactory.getDAOFactory().getContractReqDAO();

        System.out.println("DAO loaded");
        List<ContractReq> contractReqList = new ArrayList<ContractReq>();

       // for every req we have to maintain arrayList to save the objects and then write it to database
        for(int i=0;i<jTable2.getRowCount();i++)
        {
            if((Boolean)jTable2.getModel().getValueAt(i, 0) == true)
            {
                ContractReq req = readTableRow(i);
                System.out.println("got req to add at row!!!"+i);
                contractReqList.add(req);
            }
        }
            System.out.println("calling DAO factory method!! to add to database");
            dAO.addContractReqToDb(contractReqList);
       
            loadTable();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        if (JOptionPane.showConfirmDialog(this, "Do you want to confirm the import of Contractual Requirments?", "Import", JOptionPane.YES_NO_OPTION) == 0)
        {
            ContractReqDAO contractReqDAO = MySQLDAOFactory.getDAOFactory().getContractReqDAO();
            JFileChooser chooser = new JFileChooser();
            int returnVal = chooser.showOpenDialog(null);
            
            ContractReq contractReq= new ContractReq();
            List<ContractReq> listconReqs = new ArrayList<ContractReq>();
            
            if (returnVal == JFileChooser.APPROVE_OPTION)
            {
                File f = chooser.getSelectedFile();
               // String filename = "C:\\bugs reported.xls";
               

                try {
                        FileInputStream myInput = new FileInputStream(f);

                        POIFSFileSystem myFileSystem = new POIFSFileSystem(myInput);

                        HSSFWorkbook myWorkBook = new HSSFWorkbook(myFileSystem);

                        HSSFSheet mySheet = myWorkBook.getSheetAt(0);
                        HSSFCell hSSFCell;
                        int i=0;
                 
                        Iterator rowIter = mySheet.rowIterator();

                         
                        contractReq.setProjects(projects);
                        while (rowIter.hasNext())
                        {
                            HSSFRow myRow=null;
                            System.out.println("Row called");
                            if(i==0)
                            {
                                 myRow = (HSSFRow) rowIter.next();
                                i=1;
                            }
                             else         // Iterator cellIter = myRow.cellIterator();
                            {
                                 myRow = (HSSFRow) rowIter.next();
                                 contractReq.flag=true;

                                hSSFCell = myRow.getCell(0);
                                contractReq.setControlCategory(hSSFCell.toString());

                                hSSFCell = myRow.getCell(1);
                                contractReq.setClause(hSSFCell.toString());

                                hSSFCell = myRow.getCell(2);
                                contractReq.setCompliance(hSSFCell.toString());

                                hSSFCell = myRow.getCell(3);
                                contractReq.setDescription(hSSFCell.toString());

                                hSSFCell = myRow.getCell(4);
                                contractReq.setOwner(hSSFCell.toString());

                                hSSFCell = myRow.getCell(5);
                                contractReq.setAction(hSSFCell.toString());

                                hSSFCell = myRow.getCell(6);

                                Date deadline = hSSFCell.getDateCellValue();
                                System.out.println("Deadline is : "+deadline);
                                contractReq.setDeadline(deadline);

                                hSSFCell = myRow.getCell(7);
                                contractReq.setEvidance(hSSFCell.toString());

                                hSSFCell = myRow.getCell(8);
                                contractReq.setComment(hSSFCell.toString());

                             //   listconReqs.add(contractReq);
                                System.out.println("in the frame "+contractReq.toString());
                                contractReqDAO.addSingleContractToDb(contractReq);
                          }
                        }
                      
                        loadTable();

                } catch (Exception e) {
                       JOptionPane.showConfirmDialog(this, "You have chosen wrong file. Please try to import again!!", "Wrong File", JOptionPane.DEFAULT_OPTION);
                }


        }
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
         if (JOptionPane.showConfirmDialog(this, "Do you want to confirm the export of Contractual Requirments?", "Export", JOptionPane.YES_NO_OPTION) == 0)
        {
             ContractReq contractReq= new ContractReq();
             ContractReqDAO daoObj = MySQLDAOFactory.getDAOFactory().getContractReqDAO();

                 
            JFileChooser chooser = new JFileChooser();
            int returnVal = chooser.showSaveDialog(jLabel1);
            
            if (returnVal == JFileChooser.APPROVE_OPTION)
            {
             HSSFWorkbook workbook = new HSSFWorkbook();
             HSSFSheet worksheet1 = workbook.createSheet();
             //writeFirstRowToExcel(row1);
             HSSFRow row1 = worksheet1.createRow(0);

             Iterator rowIterator = worksheet1.rowIterator();
             FileOutputStream fout;
             File file;
             try
             {
                 String filename = chooser.getSelectedFile().toString();
                 if(!filename.endsWith(".xls"))
                 {
                    filename = filename.concat(".xls");
                    file = new File(filename);
                 }
                else
                 {
                     file = chooser.getSelectedFile();
                }

                fout = new FileOutputStream(file);
                 //enter first row

                //HSSFCell cell = new HSSFCell(workbook,worksheet1,1,1);
                HSSFCellStyle style = workbook.createCellStyle();
                style.setFillForegroundColor(HSSFColor.YELLOW.index);
			style.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
			
                HSSFCell cell0=row1.createCell(0);
                cell0.setCellValue("Control Category");
                cell0.setCellStyle(style);
                 HSSFCell cell1=row1.createCell(1);
                 cell1.setCellValue("Clause");
                 cell1.setCellStyle(style);
                 HSSFCell cell2=row1.createCell(2);
                 cell2.setCellValue("Compliance");
                 cell2.setCellStyle(style);
                 HSSFCell cell3=row1.createCell(3);
                 cell3.setCellValue("Description");
                 cell3.setCellStyle(style);
                 HSSFCell cell4=row1.createCell(4);
                 cell4.setCellValue("Owner");
                 cell4.setCellStyle(style);

                 HSSFCell cell5=row1.createCell(5);
                 cell5.setCellValue("Action");
                 cell5.setCellStyle(style);
                 HSSFCell cell6=row1.createCell(6);
                 cell6.setCellValue("Deadline");
                 cell6.setCellStyle(style);
                  HSSFCell cell7=row1.createCell(7);
                 cell7.setCellValue("Evidance");
                 cell7.setCellStyle(style);
                  HSSFCell cell8=row1.createCell(8);
                 cell8.setCellValue("Comment");
                 cell8.setCellStyle(style);

//                try
//                {
//                       workbook.write(fout);
//                     //  fout.flush();
//                      // fout.close();
//                }
//                catch (IOException ex)
//                {
//                        System.out.println("Exception while setting first row");
//                }
               List<ContractReq> contractReqsList =  daoObj.getContractListReqFromDb("from ContractReq where projects.projectId="+projects.getProjectId());
                if(!contractReqsList.isEmpty())
                {
                    System.out.println("Inside list");

                    HSSFRow[] rows =  new HSSFRow[contractReqsList.size()];
                    for(int i=0;i<contractReqsList.size();i++)
                    {
                         System.out.println("Inside adding rows");
                        contractReq=contractReqsList.get(i);
                        rows[i]=worksheet1.createRow(i+1);

                         HSSFCell cell16=rows[i].createCell(0);
                         cell16.setCellValue(contractReq.getControlCategory());
                         HSSFCell cell9=rows[i].createCell(1);
                         cell9.setCellValue(contractReq.getClause());
                         HSSFCell cell10=rows[i].createCell(2);
                         cell10.setCellValue(contractReq.getCompliance());
                         HSSFCell cell11=rows[i].createCell(3);
                         cell11.setCellValue(contractReq.getDescription());
                         HSSFCell cell12=rows[i].createCell(4);
                         cell12.setCellValue(contractReq.getOwner());
                         HSSFCell cell13=rows[i].createCell(5);
                         cell13.setCellValue(contractReq.getAction());

                         HSSFCell cell14=rows[i].createCell(6);
                         cell14.setCellValue(contractReq.getDeadline());

                         HSSFCell cell15=rows[i].createCell(7);
                         cell15.setCellValue(contractReq.getEvidance());
                         HSSFCell cell17=rows[i].createCell(8);
                         cell17.setCellValue(contractReq.getComment());

                    }
                      try
                       {
                            workbook.write(fout);
                            fout.flush();
                            fout.close();
                       }
                        catch (IOException ex)
                        {
                                System.out.println("Exception while setting first row");
                        }

                }
                else
                {
                    JOptionPane.showConfirmDialog(this, "No records found to export!!", "Empty", JOptionPane.DEFAULT_OPTION);
                    
                }
                } catch (FileNotFoundException ex) {
               
            }
        }
        }
            

    }//GEN-LAST:event_jButton5ActionPerformed

    private void addRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowButtonActionPerformed
        // TODO add your handling code here:
       

        int rowCount=jTable2.getModel().getRowCount();
        int columnCount = jTable2.getModel().getColumnCount();
        Object[][] rowData = {{new Boolean(false), null, null, null, null, null, null, null, null, null, null}};
        //DefaultTableModel model;
        //jTable2.setModel(model);
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

        model.addRow(rowData[0]);
        model.setValueAt((rowCount+1), rowCount, 1);
    }//GEN-LAST:event_addRowButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:


       

                    int rowNum[], colNum[];
                int startIndex=-1;
                ContractReqDAO daoObj = MySQLDAOFactory.getDAOFactory().getContractReqDAO();

                Boolean[] selectColumnVal = new Boolean[jTable2.getModel().getRowCount()];

                for (int i=0;i<jTable2.getModel().getRowCount();i++)
                    selectColumnVal[i]=(Boolean)jTable2.getValueAt(i, 0);

                for (int i=(selectColumnVal.length-1);i>=0;i--)
                {
                   if(selectColumnVal[i] == true)
                   {
                    startIndex=i;

                            System.out.println("Row To be Deleted: "+i);
                            System.out.println(" Category value: "+(String)jTable2.getModel().getValueAt(i, 2));
                              // String category = (String)jTable2.getModel().getValueAt(i, 2);
                            if(!((String)jTable2.getModel().getValueAt(i, 2)== null))
                            {
                                System.out.println("Entered in not null code");
                                ContractReq reqObj=readTableRow(i);
                                   System.out.println("Readed Row from Table:"+reqObj);
                                    if (reqObj.getContractReqId()==0)
                                    {
                                        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                                        model.removeRow(i);
                                        continue;
                                    }
                                    else
                                    {
                                       int row=daoObj.deleteContractReqFrmDb(reqObj);
                                        if (row == 0) {
                                            System.out.println("Doesn't deleted any row!");
                                        }
                                        else if (row!=0)
                                        {
                                            System.out.println("Deleted Row: " + row);
                                            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                                            model.removeRow(i);
                                        }
                                        else if (row == -1){
                                           System.out.println("Error in executing Query");
                                        }
                                         loadTable();
                                    }
                               }
                             else
                             {
                                System.out.println("Entered in null code -  remove the rows without reading");
                                           DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                                                    model.removeRow(i);
                             }
                }
               }
            //   System.out.println("start index "+startIndex+" total rows:"+jTable2.getModel().getRowCount());
                for(int i=startIndex;i<=jTable2.getModel().getRowCount();i++){
                    System.out.println("setting "+i+" at "+i);
                    if(i!=0)
                    {
                        jTable2.setValueAt(i, i-1, 1);
                    }
                }
      
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:

        if((jTable2.getSelectedColumnCount()==1) && (jTable2.getSelectedRowCount()==1) && (jTable2.getSelectedColumn()==9)){
            try {
                String url_string=(String)jTable2.getValueAt(jTable2.getSelectedRow(),9);
               // URL url = ((URL)jTable2.getValueAt(jTable2.getSelectedRow(),9));
                if(url_string!=null) {
               //  url_string = url.toString();
               // URL u=new URL();
               // u.
                    if(JOptionPane.showConfirmDialog(frame, "Do you want to Open the Evidance?", "ContractReq", JOptionPane.YES_NO_CANCEL_OPTION) == 0){
                     Desktop.getDesktop().browse(new URI(url_string));
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(ContractualReqMainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        String fileName = System.getProperty("user.dir")+"\\src\\com\\rts\\templates\\template.xls";
        String[] commands = {"cmd", "/c", "start", "\"DummyTitle\"",fileName};
        try {
            Runtime.getRuntime().exec(commands);
        } catch (IOException ex) {
            Logger.getLogger(ContractualReqMainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frame=new ContractualReqMainFrame();
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRowButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTable jTable2;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
   MyItemListener it;
  CheckBoxHeader cbh;
  CheckBoxHeader rendererComponent;
    DefaultTableModel dtm;
   static ContractualReqMainFrame frame;

    

//**************Vinod Class Declaration

public class MyTableCellRenderer
       extends DefaultTableCellRenderer {
  public Component getTableCellRendererComponent(JTable table,
                                                 Object value,
                                                 boolean isSelected,
                                                 boolean hasFocus,
                                                 int row,
                                                 int column) {
    Component c =
      super.getTableCellRendererComponent(table, value,
                                          isSelected, hasFocus,
                                          row, column);

    // Only for specific cell
    if (column == 9) {
       //c.setFont();
       // you may want to address isSelected here too
       String str = value!=null?value.toString():"";

       c.setForeground(Color.BLUE);
       c.setBackground(Color.WHITE);
       if(!table.isEditing()) {              //changed for testing purpose.. changed !isEditing part
            setText("<html><u><font color='blue'>"+str);
           
        }else if(hasFocus) {
            setText("<html><font color='blue'>"+str);
        }else{
            setText(str);
        }

    }
    return c;
  }
}




//------------------ for Select All column---------------------------
      class MyItemListener implements ItemListener{
      public void itemStateChanged(ItemEvent e){
          Object source = e.getSource();
          if (source instanceof AbstractButton == false) return;
          boolean checked = e.getStateChange() == ItemEvent.SELECTED;
          for(int x = 0, y = jTable2.getRowCount(); x < y; x++){
            jTable2.setValueAt(new Boolean(checked),x,0);
          }
      }
  }






  class CheckBoxHeader extends JCheckBox implements TableCellRenderer, MouseListener {
      protected int column;
      protected boolean mousePressed = false;
      ItemListener it1;
      public CheckBoxHeader(ItemListener itemListener) {
          setRendererComponent(this);
          this.it1 = itemListener;
          rendererComponent.addItemListener(it1);

        setHorizontalAlignment(SwingConstants.CENTER);
        setOpaque(true);

        // This call is needed because DefaultTableCellRenderer calls setBorder()
        // in its constructor, which is executed after updateUI()
        setBorder(UIManager.getBorder("TableHeader.cellBorder"));



      }
      public Component getTableCellRendererComponent(JTable table, Object value,boolean isSelected, boolean hasFocus, int row, int column) {
        if (table != null) {
          JTableHeader header = table.getTableHeader();
          if (header != null) {
            rendererComponent.setForeground(header.getForeground());
            rendererComponent.setBackground(header.getBackground());
            rendererComponent.setFont(header.getFont());
            header.addMouseListener(rendererComponent);
          }
        }
        setColumn(column);
        setBorder(UIManager.getBorder("TableHeader.cellBorder"));
        return rendererComponent;
      }
      protected void setColumn(int column) {
        this.column = column;
      }
      public int getColumn() {
        return column;
      }
      protected void handleClickEvent(MouseEvent e) {
        if (mousePressed) {
          mousePressed=false;

          JTableHeader header = (JTableHeader)(e.getSource());
          JTable tableView = header.getTable();


          TableColumnModel columnModel = tableView.getColumnModel();
          int viewColumn = columnModel.getColumnIndexAtX(e.getX());
          int column = tableView.convertColumnIndexToModel(viewColumn);
          if (viewColumn == this.column && e.getClickCount() == 1 && column != -1) {
              doClick();
          }
        }
      }
      public void mouseClicked(MouseEvent e) {
        handleClickEvent(e);
        ((JTableHeader)e.getSource()).repaint();
      }
      public void mousePressed(MouseEvent e) {
        mousePressed = true;
      }
      public void mouseReleased(MouseEvent e) {
      }
      public void mouseEntered(MouseEvent e) {
      }
      public void mouseExited(MouseEvent e) {
      }
    }



      public CheckBoxHeader getRendererComponent() {
        return rendererComponent;
    }
    public void setRendererComponent(CheckBoxHeader rendererComponent) {
        //rendererComponent.setText("Check All");

        this.rendererComponent = rendererComponent;
    }

  class MyMouseListener extends MouseAdapter{
      public void mouseClicked(MouseEvent mouseEvent) {
          int checkedCount = 0;
          rendererComponent.removeItemListener(it);
          if (rendererComponent instanceof JCheckBox) {
              boolean[] flags = new boolean[jTable2.getRowCount()];
              for (int i = 0; i < jTable2.getRowCount(); i++) {
                  flags[i] = ((Boolean) jTable2.getValueAt(i, 0)).booleanValue();
                  if(flags[i]){
                      checkedCount++;
                  }
              }
              if(checkedCount== jTable2.getRowCount()){
                  ((JCheckBox)rendererComponent).setSelected(true);
              }
              if(checkedCount!= jTable2.getRowCount()){
                  ((JCheckBox)rendererComponent).setSelected(false);
              }
          }
          rendererComponent.addItemListener(it);
          jTable2.getTableHeader().repaint();
      }
  }


//------------------- code fo Select All Column Ends here -------------

    private ContractReq readTableRow(int rowNum)
    {
      
                ContractReq reqObj = new ContractReq();

                 if(!((String)jTable2.getModel().getValueAt(rowNum, 2)== null))
                    {
                        reqObj.setControlCategory((String)jTable2.getModel().getValueAt(rowNum, 2));
                        reqObj.setClause((String)jTable2.getModel().getValueAt(rowNum, 3));

                       // reqObj.setProjects(prjObj);
                      //  System.out.println("Value at compliance[4] :" +(String)jTable2.getModel().getValueAt(rowNum, 4));
                        reqObj.setCompliance((String)jTable2.getModel().getValueAt(rowNum, 4));
                        reqObj.setDescription((String)jTable2.getModel().getValueAt(rowNum, 5));
                        reqObj.setOwner((String)jTable2.getModel().getValueAt(rowNum, 6));
                        reqObj.setAction((String)jTable2.getModel().getValueAt(rowNum, 7));

                         String date = jTable2.getModel().getValueAt(rowNum, 8).toString();
                        String [] dateArray= date.split("-");
                            int year = Integer.parseInt(dateArray[0]);
                            int month = Integer.parseInt(dateArray[1]);
                            int day = Integer.parseInt(dateArray[2]);

                        Calendar calendar = new GregorianCalendar();
                         calendar.set(year, month, day);
                         Date date1 = calendar.getTime();
                        //Date date1 =(Date)jTable2.getModel().getValueAt(rowNum, 8);
                        reqObj.setDeadline(date1);
                        reqObj.setEvidance((String)jTable2.getModel().getValueAt(rowNum, 9));
                        reqObj.setComment((String)jTable2.getModel().getValueAt(rowNum, 10));

                        //Reading Invisible columns
                        System.out.println("ContractId"+jTable2.getModel().getValueAt(rowNum, 11)+" ProjectId:"+jTable2.getModel().getValueAt(rowNum, 12));

                        if(jTable2.getModel().getValueAt(rowNum, 11)!=null)
                        {
                            reqObj.setContractReqId((Integer)jTable2.getModel().getValueAt(rowNum, 11));
                        }
                       else
                        {
                            reqObj.flag=true;
                           // reqObj.setContractReqId(0);
                        }


                        Projects prj = new Projects();
                        if(jTable2.getModel().getValueAt(rowNum, 12)!=null)
                        {
                            prj.setProjectId((Integer)jTable2.getModel().getValueAt(rowNum, 12));
                            prj.setProjectId(projects.getProjectId()); //Testing line .. remove aftetr you got Prid from BU page.
                        }
                        else
                        {
                            prj.setProjectId(projects.getProjectId());//Testing line .. remove aftetr you got Prid from BU page.
                        }
                        reqObj.setProjects(prj);

                        System.out.println("Reading Row Done!!");
                        return reqObj;

                }
                return reqObj;
    }
    
    private void loadTable()
    {
       
             ContractReqDAO dAOObj = MySQLDAOFactory.getDAOFactory().getContractReqDAO();
             List <ContractReq> allCReq = dAOObj.getContractListReqFromDb("from ContractReq where projects.projectId="+projects.getProjectId());
             System.out.println("project Id - "+projects.getProjectId()+ " allCReq size - "+allCReq.size());
    //List <ContractReq> allCReq = dAOObj.getContractListReqFromDb("from ContractReq where projectid = "+project_id);
            for (int i = 0; i < allCReq.size(); i++)
            {
            
                if (jTable2.getModel().getRowCount() <= allCReq.size())
                {
                    Object[][] rowData = {{new Boolean(false), null, null, null, null, null, null, null, null, null, null}};
                    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                    model.addRow(rowData[0]);
                    //   System.out.println("wannt to set "+jTable2.getModel().getRowCount()+" at "+jTable2.getModel().getRowCount());
                    //  model.setValueAt((jTable2.getModel().getRowCount()+1), jTable2.getModel().getRowCount(), 1);
                    if ((jTable2.getModel().getRowCount() - 1) == allCReq.size())
                    {
                        //      System.out.println("setting "+jTable2.getModel().getRowCount()+" at "+jTable2.getModel().getRowCount()+"");
                        model.setValueAt(jTable2.getModel().getRowCount(), jTable2.getModel().getRowCount() - 1, 1);
                    }
                    //  System.out.println("Ruuning");
                }

                //fetching the values.. these are the values that are existing in the database
                ContractReq req = (ContractReq) allCReq.get(i);
                // System.out.println("REq"+i+" is:"+req);
                // jTable2.getModel().removeTableModelListener(jTable2);
                jTable2.getModel().setValueAt(i + 1, i, 1);
                jTable2.getModel().setValueAt(req.getControlCategory(), i, 2);
                jTable2.getModel().setValueAt(req.getClause(), i, 3);
                jTable2.getModel().setValueAt(req.getCompliance(), i, 4);
                jTable2.getModel().setValueAt(req.getDescription(), i, 5);
                jTable2.getModel().setValueAt(req.getOwner(), i, 6);
                jTable2.getModel().setValueAt(req.getAction(), i, 7);
                jTable2.getModel().setValueAt(req.getDeadline(), i, 8);
                
                jTable2.getModel().setValueAt(req.getEvidance(), i, 9);
                
                jTable2.getModel().setValueAt(req.getComment(), i, 10);
                //Invisible Columns
                jTable2.getModel().setValueAt(req.getContractReqId(), i, 11);
                jTable2.getModel().setValueAt(req.getProjects().getProjectId(), i, 12);
            

            }
            if(allCReq.size()>0)
            {
                System.out.println("Database contents delivered...");
                 deleteButton.setEnabled(true);
            }
            else
            {
                System.out.println("Table was empty...");
                tree.jPanel6.setBackground(Color.red);
                System.out.println("Setting panel color");

                deleteButton.setEnabled(false);

             }
              
 
    }

    
    private class RowListener implements ListSelectionListener {
        public void valueChanged(ListSelectionEvent event) {
            if (event.getValueIsAdjusting()) {
                return;
            }
           // output.append("ROW SELECTION EVENT. ");
           // outputSelection();
        }
    }

    private class ColumnListener implements ListSelectionListener {
        public void valueChanged(ListSelectionEvent event) {
            if (event.getValueIsAdjusting()) {
                return;
            }
  //          output.append("COLUMN SELECTION EVENT. ");
//            outputSelection();
        }
    }
//***************Vinod
}
