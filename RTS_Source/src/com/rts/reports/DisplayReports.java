/*
 * DisplayReports.java
 *
 * Created on September 13, 2012, 11:49 AM
 */

package com.rts.reports;
import com.itextpdf.text.DocumentException;
import com.rts.dao.implementors.ReportsDAOImpl;
import com.rts.gui_final.Main;

import java.io.File;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 *
 * @author  panwadee
 */
public class DisplayReports extends javax.swing.JFrame {
    
    /** Creates new form DisplayReports */
    String Category;
    String buName;
    Configuration configuration;
    SessionFactory sessionFactory;
    Query queryResult;
    Session session=null;
    
    ReportsDAOImpl objReportsDAOImpl = new ReportsDAOImpl();
    
    public DisplayReports() {
        
        
        initComponents();
        
        jComboBoxpieChartOption.setVisible(false);
        jComboBoxCategory.setEnabled(true);jComboBoxBUSF.setEnabled(false);jComboBoxBUSFNames.setEnabled(false);jComboBoxPrjNames.setVisible(false);
        jCheckBoxComplianceYes.setEnabled(false);jCheckBoxComplianceNo.setEnabled(false);jCheckBoxCompliancePartial.setEnabled(false);jCheckBoxComplianceNA.setEnabled(false);       
        jCheckBoxAssetValueHigh.setEnabled(false);jCheckBoxAssetValueMedium.setEnabled(false); jCheckBoxAssetValueLow.setEnabled(false);
        jCheckBoxRiskImpactHigh.setEnabled(false);jCheckBoxRiskImpactMedium.setEnabled(false);jCheckBoxRiskImpactLow.setEnabled(false);jCheckBoxRiskImpactVeryHigh.setEnabled(false);
        jCheckBoxResRiskImpactHigh.setEnabled(false);jCheckBoxResRiskImpactMedium.setEnabled(false);jCheckBoxResRiskImpactLow.setEnabled(false);jCheckBoxResRiskImpactVeryHigh.setEnabled(false);       
        jCheckBoxTrtmntApplyControl.setEnabled(false);jCheckBoxTrtmntTrnsfr.setEnabled(false);jCheckBoxTrtmntAvoid.setEnabled(false);jCheckBoxTrtmntAccept.setEnabled(false);
        
        configuration= new Configuration().configure("hibernate.cfg.xml");
        sessionFactory = new Configuration().configure().buildSessionFactory();
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxBUSF = new javax.swing.JComboBox();
        jComboBoxBUSFNames = new javax.swing.JComboBox();
        jComboBoxPrjNames = new javax.swing.JComboBox();
        jComboBoxCategory = new javax.swing.JComboBox();
        jComboBoxpieChartOption = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jCheckBoxRiskImpactLow = new javax.swing.JCheckBox();
        jCheckBoxRiskImpactMedium = new javax.swing.JCheckBox();
        jCheckBoxRiskImpactHigh = new javax.swing.JCheckBox();
        jCheckBoxRiskImpactVeryHigh = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jCheckBoxResRiskImpactLow = new javax.swing.JCheckBox();
        jCheckBoxResRiskImpactMedium = new javax.swing.JCheckBox();
        jCheckBoxResRiskImpactHigh = new javax.swing.JCheckBox();
        jCheckBoxResRiskImpactVeryHigh = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jCheckBoxTrtmntApplyControl = new javax.swing.JCheckBox();
        jCheckBoxTrtmntAccept = new javax.swing.JCheckBox();
        jCheckBoxTrtmntTrnsfr = new javax.swing.JCheckBox();
        jCheckBoxTrtmntAvoid = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jCheckBoxAssetValueLow = new javax.swing.JCheckBox();
        jCheckBoxAssetValueMedium = new javax.swing.JCheckBox();
        jCheckBoxAssetValueHigh = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jCheckBoxComplianceYes = new javax.swing.JCheckBox();
        jCheckBoxComplianceNo = new javax.swing.JCheckBox();
        jCheckBoxCompliancePartial = new javax.swing.JCheckBox();
        jCheckBoxComplianceNA = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jButtonRun = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0)));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setText("Select Report Category");

        jComboBoxBUSF.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Business Unit", "Support Function" }));
        jComboBoxBUSF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxBUSFActionPerformed(evt);
            }
        });

        jComboBoxBUSFNames.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxBUSFNames.setEnabled(false);
        jComboBoxBUSFNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxBUSFNamesActionPerformed(evt);
            }
        });

        jComboBoxPrjNames.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxPrjNames.setEnabled(false);
        jComboBoxPrjNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPrjNamesActionPerformed(evt);
            }
        });

        jComboBoxCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Asset Register", "Compliance Assessment", "Risk Treatment", "Pie Chart" }));
        jComboBoxCategory.setEnabled(false);
        jComboBoxCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCategoryActionPerformed(evt);
            }
        });

        jComboBoxpieChartOption.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AssetRegisterChart according to Asset Value" }));
        jComboBoxpieChartOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxpieChartOptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBoxpieChartOption, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBoxCategory, 0, 169, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxBUSF, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxBUSFNames, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jComboBoxPrjNames, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxPrjNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxBUSFNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxBUSF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxpieChartOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel4.setText("Risk Impact");

        jCheckBoxRiskImpactLow.setText("Low");

        jCheckBoxRiskImpactMedium.setText("Medium");

        jCheckBoxRiskImpactHigh.setText("High");

        jCheckBoxRiskImpactVeryHigh.setText("Very High(Catastrophic)");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(85, 85, 85)
                .addComponent(jCheckBoxRiskImpactLow)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxRiskImpactMedium)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxRiskImpactHigh)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxRiskImpactVeryHigh)
                .addContainerGap(58, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxRiskImpactMedium)
                    .addComponent(jCheckBoxRiskImpactLow)
                    .addComponent(jCheckBoxRiskImpactHigh)
                    .addComponent(jCheckBoxRiskImpactVeryHigh))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel5.setText("Residual Risk Impact");

        jCheckBoxResRiskImpactLow.setText("Low");

        jCheckBoxResRiskImpactMedium.setText("Medium");

        jCheckBoxResRiskImpactHigh.setText("High");

        jCheckBoxResRiskImpactVeryHigh.setText("Very High(Catastrophic)");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxResRiskImpactLow)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxResRiskImpactMedium)
                .addGap(32, 32, 32)
                .addComponent(jCheckBoxResRiskImpactHigh)
                .addGap(10, 10, 10)
                .addComponent(jCheckBoxResRiskImpactVeryHigh)
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxResRiskImpactLow)
                    .addComponent(jCheckBoxResRiskImpactHigh)
                    .addComponent(jCheckBoxResRiskImpactMedium)
                    .addComponent(jCheckBoxResRiskImpactVeryHigh))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel6.setText("Risk Treatment Approach");

        jCheckBoxTrtmntApplyControl.setText("Reduce Risk-Apply Control");

        jCheckBoxTrtmntAccept.setText("Accept Risk");

        jCheckBoxTrtmntTrnsfr.setText("Transfer Risk");

        jCheckBoxTrtmntAvoid.setText("Avoid Risk");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxTrtmntApplyControl)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxTrtmntAccept)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxTrtmntTrnsfr)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxTrtmntAvoid))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxTrtmntApplyControl)
                    .addComponent(jCheckBoxTrtmntAccept)
                    .addComponent(jCheckBoxTrtmntTrnsfr)
                    .addComponent(jCheckBoxTrtmntAvoid))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel7.setText("Asset Value");

        jCheckBoxAssetValueLow.setText("Low");

        jCheckBoxAssetValueMedium.setText("Medium");

        jCheckBoxAssetValueHigh.setText("High");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(84, 84, 84)
                .addComponent(jCheckBoxAssetValueLow)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxAssetValueMedium)
                .addGap(28, 28, 28)
                .addComponent(jCheckBoxAssetValueHigh)
                .addContainerGap(154, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxAssetValueLow)
                    .addComponent(jCheckBoxAssetValueHigh)
                    .addComponent(jCheckBoxAssetValueMedium))
                .addContainerGap())
        );

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel8.setText("Compliance Value");

        jCheckBoxComplianceYes.setText("Yes");

        jCheckBoxComplianceNo.setText("No");

        jCheckBoxCompliancePartial.setText("Partial");

        jCheckBoxComplianceNA.setText("N/A");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(44, 44, 44)
                .addComponent(jCheckBoxComplianceYes)
                .addGap(29, 29, 29)
                .addComponent(jCheckBoxComplianceNo)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxCompliancePartial)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxComplianceNA)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxComplianceYes)
                    .addComponent(jCheckBoxComplianceNo)
                    .addComponent(jCheckBoxCompliancePartial)
                    .addComponent(jCheckBoxComplianceNA))
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setText("Select Report Features (Optional)");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2))
                .addGap(9, 9, 9)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jButtonRun.setFont(new java.awt.Font("Tahoma", 1, 12));
        jButtonRun.setText("Run Report");
        jButtonRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(449, 449, 449)
                        .addComponent(jButtonRun)
                        .addGap(58, 58, 58)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRun)
                    .addComponent(jButton1))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxBUSFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxBUSFActionPerformed
        // TODO add your handling code here:
        
        String reportFor = jComboBoxBUSF.getSelectedItem().toString();
        jComboBoxBUSFNames.setEnabled(true);
        
        if(reportFor.equalsIgnoreCase("Business Unit"))
        {
         String queryBUName = "select bu_name from business_unit";
         session = sessionFactory.openSession();

         queryResult=session.createSQLQuery(queryBUName);
         List lbuName =queryResult.list();
         
         Object [] array = lbuName.toArray();
         DefaultComboBoxModel model= new DefaultComboBoxModel(array);
         jComboBoxBUSFNames.setModel(model);

        }
        else
        {
           jComboBoxPrjNames.setVisible(false);
            // put logic to populate "jComboBoxBUSFNames" with SF Names
        }
        
}//GEN-LAST:event_jComboBoxBUSFActionPerformed

    private void jComboBoxCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCategoryActionPerformed
            // TODO add your handling code here:
        
        String category = jComboBoxCategory.getSelectedItem().toString();
        
        if(category.equalsIgnoreCase("Asset Register"))
        {
            jComboBoxpieChartOption.setVisible(false);
            jComboBoxCategory.setEnabled(true);jComboBoxBUSF.setEnabled(true);jComboBoxBUSFNames.setEnabled(false);jComboBoxPrjNames.setVisible(false);
            jCheckBoxComplianceYes.setEnabled(false);jCheckBoxComplianceNo.setEnabled(false);jCheckBoxCompliancePartial.setEnabled(false);jCheckBoxComplianceNA.setEnabled(false);       
            jCheckBoxAssetValueHigh.setEnabled(true);jCheckBoxAssetValueMedium.setEnabled(true); jCheckBoxAssetValueLow.setEnabled(true);
            jCheckBoxRiskImpactHigh.setEnabled(false);jCheckBoxRiskImpactMedium.setEnabled(false);jCheckBoxRiskImpactLow.setEnabled(false);jCheckBoxRiskImpactVeryHigh.setEnabled(false);
            jCheckBoxResRiskImpactHigh.setEnabled(false);jCheckBoxResRiskImpactMedium.setEnabled(false);jCheckBoxResRiskImpactLow.setEnabled(false);  jCheckBoxResRiskImpactVeryHigh.setEnabled(false);     
            jCheckBoxTrtmntApplyControl.setEnabled(false);jCheckBoxTrtmntTrnsfr.setEnabled(false);jCheckBoxTrtmntAvoid.setEnabled(false);jCheckBoxTrtmntAccept.setEnabled(false);
            
            
        }
        else if(category.equalsIgnoreCase("compliance Assessment"))
        {
          jComboBoxpieChartOption.setVisible(false);
            jComboBoxCategory.setEnabled(true);jComboBoxBUSF.setEnabled(false);jComboBoxBUSFNames.setEnabled(true);jComboBoxPrjNames.setVisible(false);
           jCheckBoxComplianceYes.setEnabled(true);jCheckBoxComplianceNo.setEnabled(true);jCheckBoxCompliancePartial.setEnabled(true);jCheckBoxComplianceNA.setEnabled(true);       
           jCheckBoxAssetValueHigh.setEnabled(false);jCheckBoxAssetValueMedium.setEnabled(false); jCheckBoxAssetValueLow.setEnabled(false);
           jCheckBoxRiskImpactHigh.setEnabled(false);jCheckBoxRiskImpactMedium.setEnabled(false);jCheckBoxRiskImpactLow.setEnabled(false);jCheckBoxRiskImpactVeryHigh.setEnabled(false);
           jCheckBoxResRiskImpactHigh.setEnabled(false);jCheckBoxResRiskImpactMedium.setEnabled(false);jCheckBoxResRiskImpactLow.setEnabled(false);jCheckBoxResRiskImpactVeryHigh.setEnabled(false);       
           jCheckBoxTrtmntApplyControl.setEnabled(false);jCheckBoxTrtmntTrnsfr.setEnabled(false);jCheckBoxTrtmntAvoid.setEnabled(false);jCheckBoxTrtmntAccept.setEnabled(false);
           
           String queryBUName = "select bu_name from business_unit";
           session = sessionFactory.openSession();

           queryResult=session.createSQLQuery(queryBUName);
           List lbuName =queryResult.list();

           Object [] array = lbuName.toArray();
           DefaultComboBoxModel model= new DefaultComboBoxModel(array);
           jComboBoxBUSFNames.setModel(model);
    }
        else if(category.equalsIgnoreCase("Risk Treatment"))
        {
            jComboBoxpieChartOption.setVisible(false);
            jComboBoxCategory.setEnabled(true);jComboBoxBUSF.setEnabled(true);jComboBoxBUSFNames.setEnabled(false);jComboBoxPrjNames.setVisible(false);
            jCheckBoxComplianceYes.setEnabled(false);jCheckBoxComplianceNo.setEnabled(false);jCheckBoxCompliancePartial.setEnabled(false);jCheckBoxComplianceNA.setEnabled(false);       
            jCheckBoxAssetValueHigh.setEnabled(true);jCheckBoxAssetValueMedium.setEnabled(true); jCheckBoxAssetValueLow.setEnabled(true);
            jCheckBoxRiskImpactHigh.setEnabled(true);jCheckBoxRiskImpactMedium.setEnabled(true);jCheckBoxRiskImpactLow.setEnabled(true);jCheckBoxRiskImpactVeryHigh.setEnabled(true);
            jCheckBoxResRiskImpactHigh.setEnabled(true);jCheckBoxResRiskImpactMedium.setEnabled(true);jCheckBoxResRiskImpactLow.setEnabled(true);  jCheckBoxResRiskImpactVeryHigh.setEnabled(true);     
            jCheckBoxTrtmntApplyControl.setEnabled(true);jCheckBoxTrtmntTrnsfr.setEnabled(true);jCheckBoxTrtmntAvoid.setEnabled(true);jCheckBoxTrtmntAccept.setEnabled(true);
        }
        else if(category.equalsIgnoreCase("Pie Chart"))
        {
            jComboBoxpieChartOption.setVisible(true);
             jComboBoxCategory.setEnabled(true);jComboBoxBUSF.setEnabled(false);jComboBoxBUSFNames.setEnabled(false);jComboBoxPrjNames.setVisible(false);
            jCheckBoxComplianceYes.setEnabled(false);jCheckBoxComplianceNo.setEnabled(false);jCheckBoxCompliancePartial.setEnabled(false);jCheckBoxComplianceNA.setEnabled(false);       
            jCheckBoxAssetValueHigh.setEnabled(false);jCheckBoxAssetValueMedium.setEnabled(false); jCheckBoxAssetValueLow.setEnabled(false);
            jCheckBoxRiskImpactHigh.setEnabled(false);jCheckBoxRiskImpactMedium.setEnabled(false);jCheckBoxRiskImpactLow.setEnabled(false);jCheckBoxRiskImpactVeryHigh.setEnabled(false);
            jCheckBoxResRiskImpactHigh.setEnabled(false);jCheckBoxResRiskImpactMedium.setEnabled(false);jCheckBoxResRiskImpactLow.setEnabled(false);jCheckBoxResRiskImpactVeryHigh.setEnabled(false);       
            jCheckBoxTrtmntApplyControl.setEnabled(false);jCheckBoxTrtmntTrnsfr.setEnabled(false);jCheckBoxTrtmntAvoid.setEnabled(false);jCheckBoxTrtmntAccept.setEnabled(false);
        }
    }//GEN-LAST:event_jComboBoxCategoryActionPerformed

    private void jComboBoxBUSFNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxBUSFNamesActionPerformed
        // TODO add your handling code here:
        
         jComboBoxPrjNames.setVisible(true);
         String reportFor = jComboBoxBUSF.getSelectedItem().toString();
        
         
         if(reportFor.equalsIgnoreCase("Business Unit"))
         {
             jComboBoxPrjNames.setEnabled(true);
             
             String buName = jComboBoxBUSFNames.getSelectedItem().toString();
             System.out.println("BU Name is "+buName);
             
             String queryBUPrjNames = "select p.project_name from project p join business_unit b"+  
                                      " on p.bu_id=b.bu_id where b.bu_name ='"+buName+"'";
             session = sessionFactory.openSession();

             queryResult=session.createSQLQuery(queryBUPrjNames);
             List lprjNames =queryResult.list();

             Object [] array = lprjNames.toArray();
             DefaultComboBoxModel model= new DefaultComboBoxModel(array);
             jComboBoxPrjNames.setModel(model);
        }
        else
        {
          
        }
         
    }//GEN-LAST:event_jComboBoxBUSFNamesActionPerformed

    private void jButtonRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunActionPerformed
        // TODO add your handling code here:
        String reportFor = jComboBoxCategory.getSelectedItem().toString();
        String buName = jComboBoxBUSFNames.getSelectedItem().toString(); 
        String projectName = jComboBoxPrjNames.getSelectedItem().toString(); 
        String assetValue = "";
        String filePath = "";
        
        if(reportFor.equalsIgnoreCase("Asset Register"))
         {
                 Iterator itr = getAssetDataForReport();
                 
                
                 if(!itr.hasNext())
                 {
                      System.out.println("Button click event: No data for Asset Register Report itr is null");
                    JOptionPane.showMessageDialog(this,"There is no data for project "+projectName+" with selected features", "Data Not Found" , 1);
                 }
                 else{ 
                     GenerateReport objGenerateReport = new GenerateReport();
                     filePath = objGenerateReport.ReportData(projectName, buName, getAssetDataForReport());
                     openPDF(filePath);
                 }
         }
        else if(reportFor.equalsIgnoreCase("Compliance Assessment"))
         {
            Boolean complianceYes = jCheckBoxComplianceYes.isSelected();
            Boolean complianceNo = jCheckBoxComplianceNo.isSelected();
            Boolean compliancePartial = jCheckBoxCompliancePartial.isSelected();
            Boolean complianceNA = jCheckBoxComplianceNA.isSelected();
            String compliance = "";
            
            if(complianceYes == true)
                compliance = "and c.compliance='YES'";
            if(complianceNo == true)
                compliance = compliance+" and c.compliance='NO'";
            if(compliancePartial == true)
                compliance = compliance+" and c.compliance='Partial'";
            if(complianceNA == true)
                compliance = compliance+" and c.compliance='NA'";
            
            String queryContractReq = "select c.controlcat,c.controlclause,c.compliance," +
                                      " c.description,c.owner,c.action,c.deadline,c.evidance,c.comment"+
                                      " from contractreq c"+
                                      " join project p on c.project_id = p.project_id"+
                                      " where project_name ='"+projectName+"' "+compliance;
            
            System.out.println("Query for contractual req is");
            System.out.println(queryContractReq);
            
             List<Object> contractList = objReportsDAOImpl.fetchContractualReqFromDb(queryContractReq);
                
            if(contractList.isEmpty())
            {
                JOptionPane.showMessageDialog(this,"There is no data for project "+projectName+" with selected features", "Data Not Found" , 1);
            }
            else{  
                GenerateContractualAssessment objGenerateReport = new GenerateContractualAssessment();
                 filePath = objGenerateReport.ReportData(projectName, buName, contractList.iterator());

               /* GenerateCharts objGenerateCharts = new GenerateCharts();
                objGenerateCharts.generatePieChart(assetList.iterator(), projectName, buName); */

                Iterator contractListItr = contractList.iterator();
                System.out.println("Clause " + "\t" + "control" + "\t" + "Compliance" + "\t" + "Desc" + "\t" + "Owner" + "\t" + "Action" + "\t" + "Deadline" + "\t" + "Evidance" + "\t"+"Comment" );
                while (contractListItr.hasNext()) {
                    Object[] obj = (Object[]) contractListItr.next();

                    for (int i = 0; i < 8; i++) {
                        if (obj[i] == null) {
                            obj[i] = " ";
                        }
                        System.out.print(obj[i] + "\t");
                    }
                    System.out.println();
                }
                openPDF(filePath);
            }
    
         }
        else if(reportFor.equalsIgnoreCase("Risk Treatment"))
        {
            // if user has selected risk treatment
             Boolean RiskImpactMedium = jCheckBoxRiskImpactMedium.isSelected();
             Boolean RiskImpactHigh = jCheckBoxRiskImpactHigh.isSelected();
             Boolean RiskImpactLow = jCheckBoxRiskImpactLow.isSelected();
             Boolean RiskImpactVeryHigh = jCheckBoxResRiskImpactVeryHigh.isSelected();
             Boolean ResRiskImpactMedium = jCheckBoxResRiskImpactMedium.isSelected();
             Boolean ResRiskImpactHigh = jCheckBoxResRiskImpactHigh.isSelected();
             Boolean ResRiskImpactLow = jCheckBoxResRiskImpactLow.isSelected();
             Boolean ResRiskImpactVeryHigh = jCheckBoxResRiskImpactVeryHigh.isSelected();
             Boolean assetValueHigh = jCheckBoxAssetValueHigh.isSelected();
             Boolean assetValueMedium = jCheckBoxAssetValueMedium.isSelected();
             Boolean assetValueLow = jCheckBoxAssetValueLow.isSelected();
             Boolean accept = jCheckBoxTrtmntAccept.isSelected();
             Boolean applycontrol = jCheckBoxTrtmntAccept.isSelected();
             Boolean avoid = jCheckBoxTrtmntAccept.isSelected();
             Boolean transfer = jCheckBoxTrtmntAccept.isSelected();
             
             assetValue ="";
             String riskImpact ="";
             String resRiskImpact ="";
             String riskTrtmnt ="";
             
             if (assetValueLow == true) {
                    assetValue = " and a.asset_value<2";
                }
                if (assetValueMedium == true) {
                    if (assetValue.equalsIgnoreCase("")) {
                        assetValue = " and a.asset_value>2 and a.asset_value <=3";
                    } else {
                        assetValue = assetValue+" and a.asset_value <=3";
                    }
                }
                if (assetValueHigh == true) {
                    if (assetValue.equalsIgnoreCase("")) {
                        assetValue = " and a.asset_value>3 and a.asset_value <=4";
                    } else {
                        assetValue = assetValue+" and a.asset_value>3 and a.asset_value <=4";
                    }
                }
             
                if(RiskImpactVeryHigh == true)
                    riskImpact = " and re.risk_impact = 4";
                if(RiskImpactHigh == true)
                    riskImpact = riskImpact+" and  re.risk_impact = 3";
                if(RiskImpactMedium == true)
                    riskImpact = riskImpact+" and  re.risk_impact = 2";
                if(RiskImpactLow == true)
                    riskImpact = riskImpact+" and  re.risk_impact = 1";
             
         /* Uncomment it after adding residual risk table    
                if(ResRiskImpactVeryHigh == true)
                    resRiskImpact = "and rr.residual_risk_impact = 4";
                if(ResRiskImpactHigh == true)
                    resRiskImpact = resRiskImpact+" and and rr.residual_risk_impact = 3";
                if(ResRiskImpactMedium == true)
                    resRiskImpact = resRiskImpact+" and and rr.residual_risk_impact = 2";
                if(ResRiskImpactLow == true)
                    resRiskImpact = resRiskImpact+" and and rr.residual_risk_impact = 1"; */
             
             if(accept == true)
                    riskTrtmnt = " and rt.risk_treatment_approach = 'Accept'";
             if(avoid == true)
                    riskTrtmnt = riskTrtmnt+" and  rt.risk_treatment_approach = 'Avoid'";
             if(applycontrol == true)
                    riskTrtmnt = riskTrtmnt+" and  rt.risk_treatment_approach = 'ApplyControl'";
             if(transfer == true)
                    riskTrtmnt = riskTrtmnt+" and  rt.risk_treatment_approach = 'Transfer'";
             
             String queryRistAssessment = "select  a.asset_name,t.threat_name,v.Vulnarability_name,"+    
                                          " re.risk_likelihood,re.risk_impact,re.risk_category,"+
                                          " rt.risk_treatment_approach,rt.decision_reason,rt.comment"+ 
                                          " from risk_treatment rt"+ 
                                           " join risk_evaluation re"+
                                           " on rt.risk_evaluation_id = re.risk_evaluation_id"+
                                           " join assets_threats_vuln atv"+
                                           " on atv.asset_threat_vuln_id = re.asset_threat_vuln_id"+
                                           " join threats t"+
                                           " on atv.threat_id = t.threat_id"+
                                           " join vulnarabilities v"+
                                           " on atv.vulnarability_id = v.vulnarability_id"+
                                           " join assets a"+
                                           " on atv.asset_id = a.asset_id"+
                                            " join project p"+
                                           " on a.project_id = p.project_id"+
                                           " where p.project_name='"+projectName+"' "+assetValue+riskImpact+riskTrtmnt;
                     
 
            System.out.println("Query for contractual req is");
            System.out.println(queryRistAssessment);
             
            List<Object> ristAssessmentList = objReportsDAOImpl.fetchRiskAssessmentReportFromDb(queryRistAssessment);
                
            if(ristAssessmentList.isEmpty())
            {
                JOptionPane.showMessageDialog(this,"There is no data for project "+projectName+" with selected features", "Data Not Found" , 1);
            }
            else{
                
            
               GenerateRiskAssessReport objGenerateRiskReport = new GenerateRiskAssessReport();
                 filePath = objGenerateRiskReport.ReportData(projectName, buName, ristAssessmentList.iterator());

                 Iterator contractListItr = ristAssessmentList.iterator();
                System.out.println("AssetName " + "\t" + "Threat" + "\t" + "Vulnerability" + "\t" + "Likelihood" + "\t" + "Impact" + "\t" + "Category" + "\t" + "Treatment Approach" + "\t" + "DecisionReason" + "\t"+"Comments" );
                while (contractListItr.hasNext()) {
                    Object[] obj = (Object[]) contractListItr.next();

                    for (int i = 0; i < 8; i++) {
                        if (obj[i] == null) {
                            obj[i] = " ";
                        }
                        System.out.print(obj[i] + "\t");
                    }
                    System.out.println();
                }
                
                openPDF(filePath);
            }
    
        }
        else if(reportFor.equalsIgnoreCase("Pie Chart"))
        {
             
            
            try {
                Iterator itr = getAssetDataForReport();
                
                 if(!itr.hasNext())
                 {
                    JOptionPane.showMessageDialog(this,"There is no data for project "+projectName+" with selected features", "Data Not Found" , 1);
                 }
                 else{ 
                     GenerateCharts objGenerateCharts = new GenerateCharts();
                     filePath = objGenerateCharts.generatePieChart(getAssetDataForReport(), projectName, buName);
                     
                     openPDF(filePath);
                 }
                
                
            } catch (DocumentException ex) {
                Logger.getLogger(DisplayReports.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_jButtonRunActionPerformed

    private void jComboBoxPrjNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPrjNamesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxPrjNamesActionPerformed

    private void jComboBoxpieChartOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxpieChartOptionActionPerformed
        // TODO add your handling code here:
        
        if(jComboBoxpieChartOption.getSelectedItem().toString().equalsIgnoreCase("AssetRegisterChart according to Asset Value"))
        {
             jComboBoxpieChartOption.setVisible(true);
            jComboBoxCategory.setEnabled(true);jComboBoxBUSF.setEnabled(true);jComboBoxBUSFNames.setEnabled(false);jComboBoxPrjNames.setVisible(false);
            jCheckBoxComplianceYes.setEnabled(false);jCheckBoxComplianceNo.setEnabled(false);jCheckBoxCompliancePartial.setEnabled(false);jCheckBoxComplianceNA.setEnabled(false);       
            jCheckBoxAssetValueHigh.setEnabled(false);jCheckBoxAssetValueMedium.setEnabled(false); jCheckBoxAssetValueLow.setEnabled(false);
            jCheckBoxRiskImpactHigh.setEnabled(false);jCheckBoxRiskImpactMedium.setEnabled(false);jCheckBoxRiskImpactLow.setEnabled(false);jCheckBoxRiskImpactVeryHigh.setEnabled(false);
            jCheckBoxResRiskImpactHigh.setEnabled(false);jCheckBoxResRiskImpactMedium.setEnabled(false);jCheckBoxResRiskImpactLow.setEnabled(false);  jCheckBoxResRiskImpactVeryHigh.setEnabled(false);     
            jCheckBoxTrtmntApplyControl.setEnabled(false);jCheckBoxTrtmntTrnsfr.setEnabled(false);jCheckBoxTrtmntAvoid.setEnabled(false);jCheckBoxTrtmntAccept.setEnabled(false);
        }
            
            
            
    }//GEN-LAST:event_jComboBoxpieChartOptionActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        this.setVisible(false);
        Main main = new Main();
        main.setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed
    
    
public void openPDF(String filePath)
{
   
    if(!filePath.equals(""))
            {
           Object[] options = {"Yes, please","No, thanks"};
           String message = "Report is saved at: "+filePath+"\n"+"Would you like to open the report ?";
           
            int n = JOptionPane.showOptionDialog(this,message,"Path of File",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]);
       
            if(n==0)
            {
              
                try {
 
		if ((new File(filePath)).exists()) {
 
			Process p = Runtime
			   .getRuntime()
			   .exec("rundll32 url.dll,FileProtocolHandler "+filePath);
                        System.out.println("File exists");
			p.waitFor();
 
		} else {
 
			JOptionPane.showMessageDialog(this,"File Does Not Exist ", "Error" , 0);
 
		}
 
		System.out.println("Done");
 
  	  } catch (Exception ex) {
		ex.printStackTrace();
	  }
            }
             
            } 
        }

public Iterator getAssetDataForReport()
{
    Iterator assetItr = null;
    
                String assetValue ="";
                String filePath ="";
                Boolean assetValueHigh = jCheckBoxAssetValueHigh.isSelected();
                Boolean assetValueMedium = jCheckBoxAssetValueMedium.isSelected();
                Boolean assetValueLow = jCheckBoxAssetValueLow.isSelected();
                String buName = jComboBoxBUSFNames.getSelectedItem().toString(); 
                String projectName = jComboBoxPrjNames.getSelectedItem().toString(); 
                

                if (assetValueLow == true) {
                    assetValue = "and a.asset_value<2";
                }
                if (assetValueMedium == true) {
                    if (assetValue.equalsIgnoreCase("")) {
                        assetValue = "and a.asset_value>2 and a.asset_value <=3";
                    } else {
                        assetValue = assetValue+" and a.asset_value <=3";
                    }
                }
                if (assetValueHigh == true) {
                    if (assetValue.equalsIgnoreCase("")) {
                        assetValue = "and a.asset_value>3 and and a.asset_value <=4";
                    } else {
                        assetValue = assetValue+" and a.asset_value>3 and a.asset_value <=4";
                    }
                }


                String queryAssetReg = "select  a.asset_name,a.asset_type,a.asset_description,a.asset_owner," + " a.asset_integrity,a.asset_availability,asset_confidentiality,a.asset_value" + " from assets a" + " join project p" + " on a.project_id = p.project_id" + " join business_unit b " + " on p.bu_id = b.bu_id" + " where b.bu_name = '" + buName + "' and p.project_name = '" + projectName + "'" + assetValue;

                System.out.println(" Asset Register query : " + queryAssetReg);

                List<Object> assetList = objReportsDAOImpl.fetchAssetRegisterFromDb(queryAssetReg);
               /* 
                if(assetList.isEmpty())
                 {
                    JOptionPane.showMessageDialog(this,"There is no data for project "+projectName+" with selected features", "Data Not Found" , 1);
                 }
                 else{ 
                
/*                GenerateReport objGenerateReport = new GenerateReport();
                 filePath = objGenerateReport.ReportData(projectName, buName, assetList.iterator());

                GenerateCharts objGenerateCharts = new GenerateCharts();
                objGenerateCharts.generatePieChart(assetList.iterator(), projectName, buName);
*/
                 assetItr = assetList.iterator();
                System.out.println("Asset Name" + "\t" + "Asset type" + "\t" + "Asset Desc" + "\t" + "Asset Owner" + "\t" + "I" + "\t" + "A" + "\t" + "C" + "\t" + "Asset value" + "\t");
                while (assetItr.hasNext()) {
                    Object[] obj = (Object[]) assetItr.next();

                    for (int i = 0; i < 8; i++) {
                        if (obj[i] == null) {
                            obj[i] = " ";
                        }
                        System.out.print(obj[i] + "\t");
                    }
                    System.out.println();
                }

                 


            
       return assetList.iterator();
           
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DisplayReports().setVisible(true);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonRun;
    private javax.swing.JCheckBox jCheckBoxAssetValueHigh;
    private javax.swing.JCheckBox jCheckBoxAssetValueLow;
    private javax.swing.JCheckBox jCheckBoxAssetValueMedium;
    private javax.swing.JCheckBox jCheckBoxComplianceNA;
    private javax.swing.JCheckBox jCheckBoxComplianceNo;
    private javax.swing.JCheckBox jCheckBoxCompliancePartial;
    private javax.swing.JCheckBox jCheckBoxComplianceYes;
    private javax.swing.JCheckBox jCheckBoxResRiskImpactHigh;
    private javax.swing.JCheckBox jCheckBoxResRiskImpactLow;
    private javax.swing.JCheckBox jCheckBoxResRiskImpactMedium;
    private javax.swing.JCheckBox jCheckBoxResRiskImpactVeryHigh;
    private javax.swing.JCheckBox jCheckBoxRiskImpactHigh;
    private javax.swing.JCheckBox jCheckBoxRiskImpactLow;
    private javax.swing.JCheckBox jCheckBoxRiskImpactMedium;
    private javax.swing.JCheckBox jCheckBoxRiskImpactVeryHigh;
    private javax.swing.JCheckBox jCheckBoxTrtmntAccept;
    private javax.swing.JCheckBox jCheckBoxTrtmntApplyControl;
    private javax.swing.JCheckBox jCheckBoxTrtmntAvoid;
    private javax.swing.JCheckBox jCheckBoxTrtmntTrnsfr;
    private javax.swing.JComboBox jComboBoxBUSF;
    private javax.swing.JComboBox jComboBoxBUSFNames;
    private javax.swing.JComboBox jComboBoxCategory;
    private javax.swing.JComboBox jComboBoxPrjNames;
    private javax.swing.JComboBox jComboBoxpieChartOption;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    // End of variables declaration//GEN-END:variables
    
}
